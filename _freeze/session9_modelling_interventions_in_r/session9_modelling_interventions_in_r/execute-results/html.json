{
  "hash": "fccc163b054717ac395e0fafb5da6757",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Modelling interventions in R\"\nsubtitle: SPARKLE short course 'Mathematical Modelling of Infectious Diseases'\nformat:\n    training-html:\n        presenter: Michael Lydeamore, Monash University\n        contributors:\n            - Lisa White, Nuffield Department of Medicine, Oxford University\n            - Michael Meehan, Australian Institute of Tropical Health & Medicine, James Cook University\n            - Wirichada Pan-Ngum, Department of Tropical Hygiene, Faculty of Tropical Medicine, Mahidol University\nexecute:\n  echo: true\n  warning: false\nautocomplete: false\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n::: {.cell}\n\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n<style type=\"text/css\">\ntextarea {\n    width: 100%;\n}\n\n.line-block {\n    line-height: 1.5em;\n}\n\n.line-block a {\n    font-style: italic;\n}\n</style>\n:::\n\n\n# Summary\n\nOne of the most useful aspects of a mathematical model for infectious\ndisease transmission is its capability to explore future intervention\nscenarios: what *could* be.\n\nWe will explore some R code for the 1st wave of COVID-19 in Thailand in\n2020. This will involve the following parts:\n\n1.  A whiteboard discussion of how to include interventions in a model\n2.  Coding a model to capture the 1st wave interventions (emergency\n    stage and curfew stage)\n3.  Estimating the effectiveness of the 1st wave interventions\n4.  Exploring counterfactuals\n5.  Practice building models to explicitly incorporate interventions of\n    your choice in breakout groups\n\n# Modelling Interventions\n\nAs always, we should set up a new script with a good header:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# SPARK Modelling Short course\n# 2023 Infectious Diseases Modelling\n\n##################################\n## MODELLING INTERVENTIONS IN R ##\n##################################\n```\n:::\n\n\nSave this file somewhere in your RStudio Project folder with a\nmeaningful name, like `session_seir_ode_covid.R`.\n\nNow, let's load some packages.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nif (!require(pacman)) install.packages(\"pacman\")\nlibrary(pacman)\n\np_load(dplyr, deSolve, ggplot2)\n```\n:::\n\n\nWe'll be making use of the first wave Thailand data. Here is a reminder\nof what the first wave in Thailand looked like:\n\n![](Thailand_First_Wave.png)\n\nLet's load back in the data, and have a look at a plot:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfirst_wave <- read.csv(\"first_wave_TH.csv\", colClasses = c(\"Date\", \"numeric\", \"numeric\"))\nfirst_wave$Date <- as.Date(first_wave$Date, format = \"%Y-%m-%d\")\n\nggplot(first_wave, aes(x = Date, y = Cases)) +\n    geom_col(fill = \"blue\") +\n    ylab(\"Daily cases\") +\n    xlab(\"\") +\n    ggtitle(\"Thailand's First Wave, Jan-Jun 2020\") +\n    theme_bw()\n```\n\n::: {.cell-output-display}\n![](session9_modelling_interventions_in_r_files/figure-html/load-data-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n# Coding Interventions\n\nWe're going to model two interventions: the emergency declaration, which\nwas made on March 26, and the start of curfew, which was on April 3rd.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfitting_start_date <- as.Date(\"2020-03-07\") # start of fitting window\nemergency_start_date <- as.Date(\"2020-03-26\") # Start of Emergency declaration\ncurfew_start_date <- as.Date(\"2020-04-03\") # Start of Curfew\nfitting_end_date <- as.Date(\"2020-05-13\") # end of fitting window\n```\n:::\n\n\nWe should filter down our data to the time period we want to fit to.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noutbreak <- first_wave %>%\n    filter(Date >= fitting_start_date, Date <= fitting_end_date)\n\n# Visual check of the filtered outbreak data and intervention times\nggplot(outbreak, aes(x = Date, y = Cases)) +\n    geom_col(fill = \"gray\") +\n    ylab(\"Daily cases\") +\n    xlab(\"\") +\n    ggtitle(\"Filtered data from Thailand's First Wave, with intervention timings\") +\n    theme_bw() +\n    geom_vline(xintercept = emergency_start_date, colour='firebrick', \n               linetype='dashed', size=1.3) +\n    geom_vline(xintercept = curfew_start_date, colour='firebrick', \n               linetype='dashed', size=1.3) +\n    annotate(\n        geom = \"text\",\n        label = c(\"lockdown\", \"Curfew\"),\n        x = c(emergency_start_date, curfew_start_date),\n        y = c(175, 175),\n        angle = 90,\n        vjust = 1.5\n    )\n```\n\n::: {.cell-output-display}\n![](session9_modelling_interventions_in_r_files/figure-html/filter-data-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nOne of the most important things when you're doing an optimisation is a\ndecent initial guess at your parameter values. Luckily, in a previous\nsession, we got a good estimate of R0, and we know a few things about\nhow effective the various interventions might be.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nparameters <- c(\n    R0 = 3.970588, # from the NM fitting session\n    latent_period = 5, # Rounded from Trauer, J.M., Lydeamore, M.J., Dalton, G.W. et al. Understanding how Victoria, Australia gained control of its second COVID-19 wave. Nat Commun 12, 6266 (2021). https://doi.org/10.1038/s41467-021-26558-4\n    infectious_period = 6, # Rounded from Trauer et al\n    emergency_efficacy = 0.70, # guess, assuming R_interventions = (1-efficacy) * R0\n    curfew_efficacy = 0.80 # guess\n)\n```\n:::\n\n\nSince we're using the same model from Sessions 4 and 5, we also need the\nsame initial conditions, state variables and time window.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Initial conditions\nTotal_population <- 6.6e7 # Roughly population of Thailand\nInitial_exposed <- 0 # Simplifying assumption\nInitial_infectious <- 30.356868 # from the NM fitting session\nInitial_recovered <- 0 # simplifying assumption\nInitial_susceptible <- Total_population - Initial_exposed - Initial_infectious - Initial_recovered\n\n\n# State variables\nstate <- c(\n    Susceptible = Initial_susceptible,\n    Exposed = Initial_exposed,\n    Infectious = Initial_infectious,\n    Recovered = Initial_recovered\n)\n\n# Time window\ntimes <- seq(fitting_start_date, fitting_end_date, by = 1)\n```\n:::\n\n\nWe're going to use a slightly different implementation of the SEIR model\nfrom the previous session. See if you can spot the differences.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nCOVID.intervention <- function(t, state, parameters) {\n    with(as.list(c(state, parameters)), {\n\n        # Calculate the total population size\n        Total_population <- Susceptible + Exposed + Infectious + Recovered\n\n        # Calculate intervention efficacy\n        if (t < as.numeric(emergency_start_date - fitting_start_date)) {\n            intervention_efficacy <- 0\n        } else if (t >= as.numeric(emergency_start_date - fitting_start_date) &&\n            t < as.numeric(curfew_start_date - fitting_start_date)) {\n            intervention_efficacy <- emergency_efficacy\n        } else {\n            intervention_efficacy <- curfew_efficacy\n        }\n\n        # Calculate the effective reproduction number in the presence of interventions\n        R_interventions <- (1 - intervention_efficacy) * R0 # assuming everyone starts susceptible\n\n        # Calculate the average force of infection imposed on each susceptible individual\n        force_of_infection <- R_interventions * Infectious / (Total_population * infectious_period)\n\n        # Calculate the net (instantaneous) change in each state variable\n        Susceptible_change <- -force_of_infection * Susceptible\n        Exposed_change <- force_of_infection * Susceptible - Exposed / latent_period\n        Infectious_change <- Exposed / latent_period - Infectious / infectious_period\n        Recovered_change <- Infectious / infectious_period\n\n        # Return net changes as list\n        return(list(\n            c(\n                Susceptible_change,\n                Exposed_change,\n                Infectious_change,\n                Recovered_change\n            )\n        ))\n    })\n}\n```\n:::\n\n\nWhat is different for this implementation compared to the implementation\nin session 4? Why?\n\n```{=html}\n<textarea name='Text1' cols='127' rows='4'></textarea>\n```\n\nNow, we wrap this function in a call to `ode` to solve our model, and\ngive us the outputs we are interested in.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Wrapper function to solve model and tidy up output\nsolve.intervention.model <- function(y_ = state,\n                                     times_ = times,\n                                     func. = COVID.intervention,\n                                     parms_ = parameters) {\n    out <- ode(\n        y = y_,\n        times = as.numeric(times_ - times_[1]),\n        func = func.,\n        parms = parms_\n    )\n\n    # Calculate the prevalence, incidence and cumulative incidence (for comparison with data)\n    out <- as.data.frame(out) %>%\n        mutate(\n            Incidence = Exposed * (1 / parms_[\"latent_period\"]),\n            Cumulative_incidence = cumsum(Incidence) + Incidence[1],\n            Population = Susceptible + Exposed + Infectious + Recovered,\n            Prevalence = (Exposed + Infectious)/Population,\n            Date = times_\n        )\n\n    return(as.data.frame(out))\n}\n```\n:::\n\n\nWe can solve this for our initial guess parameters, and see how it looks\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Run the model for out initial set of parameters\nout_init <- solve.intervention.model()\n\n\n# Make sure to add observational uncertainty\nout_init <- out_init %>%\n    mutate(\n        lower50 = qpois(p = 0.25, lambda = Incidence), # 50% confidence interval (i.e., 25 - 75th centiles)\n        upper50 = qpois(p = 0.75, lambda = Incidence),\n        lower95 = qpois(p = 0.025, lambda = Incidence), # 95% confidence interval (i.e., 2.5 - 97.5th centiles)\n        upper95 = qpois(p = 0.975, lambda = Incidence)\n    )\n\n# Plot initial estimate\nggplot(outbreak) +\n    geom_col(aes(x = Date, y = Cases), width = 1, fill = \"gray\", colour = \"darkgray\") +\n    geom_ribbon(\n        data = out_init[-1, ], aes(x = Date, ymin = lower50, ymax = upper50),\n        fill = \"firebrick2\", colour = \"firebrick2\", alpha = 0.8\n    ) +\n    geom_ribbon(\n        data = out_init[-1, ], aes(x = Date, ymin = lower95, ymax = upper95),\n        fill = \"firebrick2\", colour = \"firebrick2\", alpha = 0.5\n    ) +\n    ylab(\"Daily cases\") +\n    xlab(\"\") +\n    ggtitle(\"Thailand's First Wave, 2020\") +\n    theme_bw()+\n    geom_vline(xintercept = emergency_start_date, colour='firebrick', \n               linetype='dashed', size=1) +\n    geom_vline(xintercept = curfew_start_date, colour='firebrick', \n               linetype='dashed', size=1) +\n    annotate(\n        geom = \"text\",\n        label = c(\"lockdown\", \"Curfew\"),\n        x = c(emergency_start_date, curfew_start_date),\n        y = c(175, 175),\n        angle = 90,\n        vjust = 1.5\n    )\n```\n\n::: {.cell-output-display}\n![](session9_modelling_interventions_in_r_files/figure-html/solve-initial-guess-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nNot bad! What do you observe? Why do you think this might be, and how\ncan the fit be improved?\n\n```{=html}\n<textarea name='Text1' cols='127' rows='4'></textarea>\n```\n\n# Model calibration\n\nSo we have written code that can solve our model for a given set of\nparameters. Now, just like we did last time, we can use maximum\nlikelihood estimation to determine the optimal parameters for our model.\n\nAnd now we're ready to write our negative log likelihood function.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnegative.log.likelihood <- function(transformed_parameters, \n                                    data = outbreak$Cases[-1],\n                                    state_ = state,\n                                    times_ = times,\n                                    func. = COVID.intervention, # note this is our ode solver\n                                    parms_base = parameters) {\n\n    # Add in our fitting parameters\n    parms_base[c(\"emergency_efficacy\", \"curfew_efficacy\")] <-\n        transformed_parameters[c(\"emergency_efficacy\", \"curfew_efficacy\")]\n\n    # Solve model with updated parameters\n    out <- solve.intervention.model(\n        state_,\n        times_,\n        func.,\n        parms_base\n    )\n\n    return(-sum(dpois(\n        x = data,\n        lambda = out$Incidence[-1],\n        log = TRUE\n    ))) # Poisson observation model\n}\n```\n:::\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ninit_parameters <- c(parameters[c(\n    \"emergency_efficacy\",\n    \"curfew_efficacy\"\n)])\n\n# Calculate initial negative log-likelihood\nnegative.log.likelihood(init_parameters)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1865.599\n```\n\n\n:::\n\n```{.r .cell-code}\nnegative_log_likelihood_initial <- -sum(dpois(\n    x = outbreak$Cases[-1],\n    lambda = out_init$Incidence[-1], # This is from the previous section!\n    log = TRUE\n))\nnegative_log_likelihood_initial\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1865.599\n```\n\n\n:::\n:::\n\n\n::: callout-note\n## Parameter bounds\n\nOptimisation algorithms by default will try any value for a parameter (i.e. $(-\\infty, \\infty)$). We can specify bounds on the parameters we are interested in using the `lower` and `upper` arguments to `optim()`.\n:::\n\nNow we're in a place to use `optim` again, just like we've done\npreviously.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noptim_NM <- optim(\n    par = init_parameters,\n    fn = negative.log.likelihood,\n    method = \"L-BFGS-B\",\n    lower = 0,\n    upper = 1,\n    hessian = TRUE\n)\n\n# Check for convergence\noptim_NM$convergence # 0 - converged; nonzero - failed\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n\n```{.r .cell-code}\n# Back-transform parameters\noptim_NM$par[c(\n    \"emergency_efficacy\",\n    \"curfew_efficacy\"\n)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nemergency_efficacy    curfew_efficacy \n         0.7907728          0.9164655 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Inspect the optimal negative log-likelihood\noptim_NM$value\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 372.4239\n```\n\n\n:::\n:::\n\n\nThis looks pretty good, and so we can be reasonably happy we've reached\nan optimal solution. Now that we have a solution, let's plot it.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noptimal_parameters <- parameters\noptimal_parameters[c(\"emergency_efficacy\", \"curfew_efficacy\")] <- optim_NM$par[c(\"emergency_efficacy\",\"curfew_efficacy\")]\n\n\n\n# Solve the model given the optimal parameters and initial conditions\noptimal_solution <- solve.intervention.model(\n    y_ = state,\n    times_ = times,\n    func. = COVID.intervention,\n    parms = optimal_parameters\n)\n\n\n# Calculate the observational confidence intervals\noptimal_solution <- optimal_solution %>%\n    mutate(\n        lower50 = qpois(p = 0.25, lambda = Incidence), # 50% confidence interval (i.e., 25 - 75th centiles)\n        upper50 = qpois(p = 0.75, lambda = Incidence),\n        lower95 = qpois(p = 0.025, lambda = Incidence), # 95% confidence interval (i.e., 2.5 - 97.5th centiles)\n        upper95 = qpois(p = 0.975, lambda = Incidence)\n    )\n\nggplot(outbreak) +\n    geom_col(\n        aes(x = Date, y = Cases),\n        width = 1.0,\n        fill = \"gray\",\n        colour = \"darkgray\"\n    ) +\n    geom_ribbon(\n        data = optimal_solution[-1, ],\n        aes(x = Date, ymin = lower50, ymax = upper50),\n        fill = \"firebrick2\", colour = \"firebrick2\", alpha = 0.8\n    ) +\n    geom_ribbon(\n        data = optimal_solution[-1, ],\n        aes(x = Date, ymin = lower95, ymax = upper95),\n        fill = \"firebrick2\", colour = \"firebrick2\", alpha = 0.5\n    ) +\n    ylab(\"Daily cases\") +\n    xlab(\"\") +\n    ggtitle(\"Intervention model fit (optimized)\") +\n    geom_vline(\n        aes(xintercept = emergency_start_date),\n        linetype = \"dashed\", colour = \"firebrick\"\n    ) +\n    geom_vline(\n        aes(xintercept = curfew_start_date),\n        linetype = \"dashed\", colour = \"firebrick\"\n    ) +\n    annotate(\n        geom = \"text\",\n        label = c(\"lockdown\", \"Curfew\"),\n        x = c(emergency_start_date, curfew_start_date),\n        y = c(175, 175),\n        angle = 90,\n        vjust = 1.5\n    ) +\n    theme_bw()\n```\n\n::: {.cell-output-display}\n![](session9_modelling_interventions_in_r_files/figure-html/optimal-plot-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nGreat! The fit looks reasonable, at least visually. To report on\nparameter uncertainty, we use the same tricks as last time, with the\nsquare root of the diagonals of the hessian matrix.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncovar_matrix <- solve(optim_NM$hessian)\nstd_errors <- sqrt(diag(covar_matrix))\nestimates <- data.frame(\n    estimate = optim_NM$par,\n    std_error = std_errors\n) %>%\n    dplyr::mutate(\n        lower95CI = estimate - 1.96 * std_error,\n        upper95CI = estimate + 1.96 * std_error\n    )\n\nestimates\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                    estimate   std_error lower95CI upper95CI\nemergency_efficacy 0.7907728 0.009871031 0.7714256 0.8101201\ncurfew_efficacy    0.9164655 0.003571024 0.9094663 0.9234647\n```\n\n\n:::\n:::\n\n\nWhat do you see in these plots and estimates?\n\n```{=html}\n<textarea name='Text1' cols='127' rows='2'></textarea>\n```\n\nWhich type of uncertainty does this capture? What other types of\nuncertainty should we consider?\n\n```{=html}\n<textarea name='Text1' cols='127' rows='2'></textarea>\n```\n\n# Exploring counterfactuals\n\nNow we have a model for the COVID-19 transmission in Thailand, and we\nhave estimates of how effective the two stages of interventions were\n(emergency and curfew), we can now explore what *could* have happened,\nor the **counterfactuals**.\n\nWhat could have happened if no intervention was applied?\n\n```{=html}\n<textarea name='Text1' cols='127' rows='2'></textarea>\n```\n\nWhat could have happened if we started the emergency stage earlier?\n\n```{=html}\n<textarea name='Text1' cols='127' rows='2'></textarea>\n```\n\nWhat other interesting counterfactual scenarios could we explore?\n\n```{=html}\n<textarea name='Text1' cols='127' rows='2'></textarea>\n```\n\nWhich of the scenarios you suggested previously might be of interest to\nthe general public and why? Would the scenarios of interest to decision\nmakers be different? If so, how and why?\n\n```{=html}\n<textarea name='Text1' cols='127' rows='2'></textarea>\n```\n\n# Counterfactuals example solution code\n\n::: panel-tabset\n## Spoiler alert\n\nThe solutions tab contains the complete code for the counterfactuals.\n**Only click on it if you have tried to complete the exercises yourself\nand need some help**\n\n## Example code for exploring counterfactuals\n\nYour code to explore the counterfactuals might look like this:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# create a function to do the same steps over for us\nscenario.exploration = function(lockdown_eff, curfew_eff, lockdown_start, curfew_start, plot_title){\n  \n  new_params = parameters \n  new_params[c(\"lockdown_efficacy\", \"curfew_efficacy\")] = c(lockdown_eff, curfew_eff)\n\n  new_solution <- solve.intervention.model(\n    y_ = state,\n    times_ = times,\n    func. = COVID.intervention,\n    parms = new_params\n)\n  \n  \n# Calculate the observational confidence intervals\nobservational_intervals <- new_solution %>%\n    mutate(\n        lower50 = qpois(p = 0.25, lambda = Incidence), # 50% confidence interval (i.e., 25 - 75th centiles)\n        upper50 = qpois(p = 0.75, lambda = Incidence),\n        lower95 = qpois(p = 0.025, lambda = Incidence), # 95% confidence interval (i.e., 2.5 - 97.5th centiles)\n        upper95 = qpois(p = 0.975, lambda = Incidence)\n    )\n\nggplot(outbreak) +\n    geom_col(\n        aes(x = Date, y = Cases),\n        width = 1.0,\n        fill = \"gray\",\n        colour = \"darkgray\"\n    ) +\n    geom_ribbon(\n        data = observational_intervals[-1, ],\n        aes(x = Date, ymin = lower50, ymax = upper50),\n        fill = \"darkorchid4\", colour = \"darkorchid4\", alpha = 0.8\n    ) +\n    geom_ribbon(\n        data = observational_intervals[-1, ],\n        aes(x = Date, ymin = lower95, ymax = upper95),\n        fill = \"darkorchid4\", colour = \"darkorchid4\", alpha = 0.5\n    ) +\n    #geom_point(data=optim_solution[-1,], aes(x=Date, y=Incidence), size=2, colour=\"firebrick2\") +\n    geom_point(data=new_solution[-1,], aes(x=Date, y=Incidence), size=2, colour=\"darkorchid4\") +\n    ylab(\"Daily cases\") +\n    xlab(\"\") +\n    ggtitle(plot_title) +\n    geom_vline(\n        aes(xintercept = lockdown_start),\n        linetype = \"dashed\", colour = \"firebrick\"\n    ) +\n    geom_vline(\n        aes(xintercept = curfew_start),\n        linetype = \"dashed\", colour = \"firebrick\"\n    ) +\n    annotate(\n        geom = \"text\",\n        label = c(\"lockdown\", \"Curfew\"),\n        x = c(lockdown_start, curfew_start),\n        y = c(175, 175),\n        angle = 90,\n        vjust = 1.5\n    ) +\n    theme(panel.background = element_rect(fill = \"white\", colour = \"white\"),\n          panel.grid.major = element_line(colour = \"grey90\"),\n          panel.grid.major.x = element_blank(),\n          axis.line = element_line(size = 0.4, colour = \"grey10\"),\n          text = element_text(size=12,  family=\"serif\"),\n          legend.key = element_rect(fill = \"white\", colour = \"white\"),\n          legend.position = \"top\",\n          strip.background =element_rect(fill=\"royalblue\"),\n          strip.text = element_text(size = 10, colour = 'white'))\n}\n\n### No intervention ###\nscenario.exploration(lockdown_eff=0, curfew_eff=0, \n                     lockdown_start=emergency_start_date, \n                     curfew_start=curfew_start_date, \n                     plot_title=\"Counterfactual: No interventions\")\n\n### What could have happened if we the emergency declaration made earlier? ###\n# Store original values \nemergency_start_date_orig = emergency_start_date\ncurfew_start_date_orig = curfew_start_date\n# set new values\nemergency_start_date <- fitting_start_date  #  fitting start date\nscenario.exploration(lockdown_eff=optimal_parameters[\"emergency_efficacy\"], \n                     curfew_eff=optimal_parameters[\"curfew_efficacy\"], \n                     lockdown_start=emergency_start_date, \n                     curfew_start=curfew_start_date, \n                     plot_title=\"Counterfactual: Emergency declaration made at beginning of fitting window\")\n# set new values\nemergency_start_date <- fitting_start_date + 10 # 10 days after fitting start date\nscenario.exploration(lockdown_eff=optimal_parameters[\"emergency_efficacy\"], \n                     curfew_eff=optimal_parameters[\"curfew_efficacy\"], \n                     lockdown_start=emergency_start_date, \n                     curfew_start=curfew_start_date, \n                     plot_title=\"Counterfactual: Emergency declaration made 10 dates after fitting window\")\n# now make it so no curfew in this scenario\ncurfew_start_date <- fitting_end_date\nscenario.exploration(lockdown_eff=optimal_parameters[\"emergency_efficacy\"], \n                     curfew_eff=optimal_parameters[\"curfew_efficacy\"], \n                     lockdown_start=emergency_start_date, \n                     curfew_start=curfew_start_date, \n                     plot_title=\"Counterfactual: Emergency declaration made 10 days after fitting window, no curfew\")\n\n\n### Curfew starts at same time as state of emergency declared ###\nemergency_start_date <- emergency_start_date_orig\ncurfew_start_date <- emergency_start_date\nscenario.exploration(lockdown_eff=optimal_parameters[\"emergency_efficacy\"], \n                     curfew_eff=optimal_parameters[\"curfew_efficacy\"], \n                     lockdown_start=emergency_start_date, \n                     curfew_start=curfew_start_date, \n                     plot_title=\"Counterfactual: Curfew starts same time as emergency declaration\")\n```\n:::\n\n:::",
    "supporting": [
      "session9_modelling_interventions_in_r_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}