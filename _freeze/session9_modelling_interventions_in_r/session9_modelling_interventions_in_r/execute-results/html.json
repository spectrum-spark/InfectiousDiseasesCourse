{
  "hash": "67d8ef92c4cfa74f4ead8e7561be8811",
  "result": {
    "markdown": "---\ntitle: \"Modelling interventions in R\"\nauthor: \n  - Thanks to <a href=\"http://www.tropmedres.ac/researchers/researcher/lisa-white\">Lisa White</a>, Nuffield Department of Medicine, Oxford University,\n  - <a href=\"https://research.jcu.edu.au/portfolio/emma.mcbryde\">Michael Meehan</a>, Australian Institute of Tropical Health & Medicine, James Cook University and\n  - <a href=\"http://www.tropmedres.ac/wirichada-pan-ngum\">Wirichada Pan-Ngum</a>, Department of Tropical Hygiene, Faculty of Tropical Medicine, Mahidol University.\n  - Presented by <a href=\"https://research.monash.edu/en/persons/michael-lydeamore\">Michael Lydeamore</a>, Department of Econometrics and Business Statistics, Monash University\noutput: \n  html_document:\n     self_contained: yes\n     link-external-icon: true\n     link-external-newwindow: true\nexecute:\n  echo: true\n  warning: false\neditor: \n  markdown: \n    wrap: 72\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n<style type=\"text/css\">\ntextarea {\n    width: 100%;\n}\n\n.line-block {\n    line-height: 1.5em;\n}\n\n.line-block a {\n    font-style: italic;\n}\n</style>\n:::\n\n\n# Summary\n\nOne of the most useful aspects of a mathematical model for infectious disease transmission is its capability to explore future intervention scenarios: what *could* be.\n\nWe will explore some R code for the 1st wave of COVID-19 in Thailand in 2020. This will involve the following parts:\n\n1. A whiteboard discussion of how to include interventions in a model\n2. Coding a model to capture the 1st wave interventions (emergency stage and curfew stage)\n3. Estimating the effectiveness of the 1st wave interventions\n4. Exploring counterfactuals\n5. Practice building models to explicitly incorporate interventions of your choice in breakout groups\n\n# Modelling Interventions\n\nAs always, we should set up a new script with a good header:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# SPARK Modelling Short course\n# 2023 Infectious Diseases Modelling\n\n##################################\n## MODELLING INTERVENTIONS IN R ##\n##################################\n```\n:::\n\nSave this file somewhere in your `student_materials` folder with a meaningful name, like `session_seir_ode_covid`.\n\nWe also have to set the working directory. We can do this by pressing \"To Source Location\", or using the `setwd()` command like we've done previously.\n\nNow, let's load some packages.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(deSolve)\nlibrary(ggplot2)\n```\n:::\n\n\nWe'll be making use of the first wave Thailand data. Here is a reminder of what the first wave in Thailand looked like:\n\n![](Thailand_First_Wave.png)\n\nLet's load back in the data, and have a look at a plot:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfirst_wave <- read.csv(\"first_wave_TH.csv\", colClasses = c(\"Date\", \"numeric\", \"numeric\"))\nfirst_wave$Date <- as.Date(first_wave$Date, format = \"%Y-%m-%d\")\n\nggplot(first_wave, aes(x = Date, y = Cases)) +\n    geom_col(fill = \"blue\") +\n    ylab(\"Daily cases\") +\n    xlab(\"\") +\n    ggtitle(\"Thailand's First Wave, Jan-Jun 2020\") +\n    theme_bw()\n```\n\n::: {.cell-output-display}\n![](session9_modelling_interventions_in_r_files/figure-html/load-data-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n# Coding Interventions\nWe're going to model two interventions: the emergency declaration, which was made on February 26, and the start of curfew, which was on March 4th.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfitting_start_date <- as.Date(\"2020-03-07\") # start of fitting window\nemergency_start_date <- as.Date(\"2020-03-26\") # Start of Emergency declaration\ncurfew_start_date <- as.Date(\"2020-04-03\") # Start of Curfew\nfitting_end_date <- as.Date(\"2020-05-13\") # end of fitting window\n```\n:::\n\n\nWe should filter down our data to the time period we want to fit to.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noutbreak <- first_wave %>%\n    filter(Date >= fitting_start_date, Date <= fitting_end_date)\n```\n:::\n\n\nOne of the most important things when you're doing an optimisation is a decent initial guess at your parameter values. Luckily, in a previous session, we got a good estimate of R0, and we know a few things about how effective the various interventions might be.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nparameters <- c(\n    R0 = 3.970588, # from the NM fitting session\n    incubation_period = 5, # Rounded from Trauer et al\n    infectious_period = 6, # Rounded from Trauer et al\n    emergency_efficacy = 0.70, # guess\n    curfew_efficacy = 0.80 # guess\n)\n```\n:::\n\n\nSince we're using the same model from Session 5, we also need the same initial conditions, state variables and time window.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Initial conditions\nTotal_population <- 6.6e7 # Roughly population of Thailand\nInitial_exposed <- 0 # Simplifying assumption\nInitial_infectious <- 30.356868 # from the NM fitting session\nInitial_recovered <- 0 # simplifying assumption\nInitial_susceptible <- Total_population - Initial_exposed - Initial_infectious - Initial_recovered\n\n\n# State variables\nstate <- c(\n    Susceptible = Initial_susceptible,\n    Exposed = Initial_exposed,\n    Infectious = Initial_infectious,\n    Recovered = Initial_recovered\n)\n\n# Time window\ntimes <- seq(fitting_start_date, fitting_end_date, by = 1)\n```\n:::\n\n\nWe're going to use a slightly different implementation of the SEIR model from the previous session. See if you can spot the differences.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nCOVID.intervention <- function(t, state, parameters) {\n    with(as.list(c(state, parameters)), {\n\n        # Calculate the total population size\n        Total_population <- Susceptible + Exposed + Infectious + Recovered\n\n        # Calculate intervention efficacy\n        if (t < as.numeric(emergency_start_date - fitting_start_date)) {\n            intervention_efficacy <- 0\n        } else if (t >= as.numeric(emergency_start_date - fitting_start_date) &&\n            t < as.numeric(curfew_start_date - fitting_start_date)) {\n            intervention_efficacy <- emergency_efficacy\n        } else {\n            intervention_efficacy <- curfew_efficacy\n        }\n\n        # Calculate the effective reproduction number in the presence of interventions\n        Reff <- (1 - intervention_efficacy) * R0 # assuming everyone starts susceptible\n\n        # Calculate the average force of infection imposed on each susceptible individual\n        force_of_infection <- Reff * Infectious / (Total_population * infectious_period)\n\n        # Calculate the net (instantaneous) change in each state variable\n        Susceptible_change <- -force_of_infection * Susceptible\n        Exposed_change <- force_of_infection * Susceptible - Exposed / incubation_period\n        Infectious_change <- Exposed / incubation_period - Infectious / infectious_period\n        Recovered_change <- Infectious / infectious_period\n\n        # Return net changes as list\n        return(list(\n            c(\n                Susceptible_change,\n                Exposed_change,\n                Infectious_change,\n                Recovered_change\n            )\n        ))\n    })\n}\n```\n:::\n\n\nWhat is different for this implementation compared to the implementation in session 6? Why?\n<textarea name='Text1' cols='127' rows='4'></textarea>\n\nNow, we wrap this function in a call to `ode` to solve our model, and give us the outputs we are interested in.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Wrapper function to solve model and tidy up output\nsolve.intervention.model <- function(y_ = state,\n                                     times_ = times,\n                                     func. = COVID.intervention,\n                                     parms_ = parameters) {\n    out <- ode(\n        y = y_,\n        times = as.numeric(times_ - times_[1]),\n        func = func.,\n        parms = parms_\n    )\n\n    # Calculate the prevalence, incidence and cumulative incidence (for comparison with data)\n    out <- as.data.frame(out) %>%\n        mutate(\n            Prevalence = Exposed + Infectious,\n            Incidence = Exposed / parms_[\"incubation_period\"],\n            Cumulative_incidence = cumsum(Incidence) + Incidence[1],\n            Population = Susceptible + Exposed + Infectious + Recovered,\n            Date = times_\n        )\n\n    return(as.data.frame(out))\n}\n```\n:::\n\n\nWe can solve this for our initial guess parameters, and see how it looks\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Run the model for out initial set of parameters\nout_init <- solve.intervention.model()\n\n\n# Make sure to add observational uncertainty\nout_init <- out_init %>%\n    mutate(\n        lower50 = qpois(p = 0.25, lambda = Incidence), # 50% confidence interval (i.e., 25 - 75th centiles)\n        upper50 = qpois(p = 0.75, lambda = Incidence),\n        lower95 = qpois(p = 0.025, lambda = Incidence), # 95% confidence interval (i.e., 2.5 - 97.5th centiles)\n        upper95 = qpois(p = 0.975, lambda = Incidence)\n    )\n\n# Plot initial estimate\nggplot(outbreak) +\n    geom_col(aes(x = Date, y = Cases), width = 1, fill = \"dodgerblue2\", colour = \"blue\") +\n    geom_ribbon(\n        data = out_init[-1, ], aes(x = Date, ymin = lower50, ymax = upper50),\n        fill = \"firebrick2\", colour = \"firebrick2\", alpha = 0.8\n    ) +\n    geom_ribbon(\n        data = out_init[-1, ], aes(x = Date, ymin = lower95, ymax = upper95),\n        fill = \"firebrick2\", colour = \"firebrick2\", alpha = 0.5\n    ) +\n    ylab(\"Daily cases\") +\n    xlab(\"\") +\n    ggtitle(\"Thailand's First Wave, 2020\") +\n    theme_bw()\n```\n\n::: {.cell-output-display}\n![](session9_modelling_interventions_in_r_files/figure-html/solve-initial-guess-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nNot bad! What do you observe? Why do you think this might be, and how can the fit be improved?\n<textarea name='Text1' cols='127' rows='4'></textarea>\n\n# Model calibration\nSo we have written code that can solve our model for a given set of parameters. Now, just like we did last time, we can use maximum likelihood estimation to determine the optimal parameters for our model.\n\n::: {.callout-note}\n## Parameter scaling\nOptimisation algorithms rely on parameters being able to take on **any** value (i.e. $(-\\infty, \\infty)$)\n:::\n\nOur effectiveness parameters are defined as \"reductions in transmission\", which means they are bounded between 0 and 1. To put them in the form the optimiser is expecting, we'll use the _logit_ transform.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlogit <- function(x) {\n    return(log(x / (1 - x)))\n}\n\n# And its inverse\ninverse.logit <- function(x) {\n    return(exp(x) / (1 + exp(x)))\n}\n```\n:::\n\n\nAnd now we're ready to write our negative log likelihood function.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnegative.log.likelihood <- function(transformed_parameters, # assumes logit form of parameters -- per Wednesday arvo session\n                                    data = outbreak$Cases[-1],\n                                    state_ = state,\n                                    times_ = times,\n                                    func. = COVID.intervention, # note this is our ode solver\n                                    parms_base = parameters) {\n\n    # Back-transform model parameters (inverse logit)\n    parms_base[c(\"emergency_efficacy\", \"curfew_efficacy\")] <-\n        inverse.logit(transformed_parameters[c(\"emergency_efficacy\", \"curfew_efficacy\")])\n\n    # Solve model with updated parameters\n    out <- solve.intervention.model(\n        state_,\n        times_,\n        func.,\n        parms_base\n    )\n\n    return(-sum(dpois(\n        x = data,\n        lambda = out$Incidence[-1],\n        log = TRUE\n    ))) # Poisson observation model\n}\n```\n:::\n\n\nThe complicated part of this is transforming back and forth between the logit-transformed parameters, and the \"actual\" parameters that we care about. We have to make sure to transform before we start.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ninit_parameters <- c(logit(parameters[c(\n    \"emergency_efficacy\",\n    \"curfew_efficacy\"\n)]))\n\n# Calculate initial negative log-likelihood\nnegative.log.likelihood(init_parameters)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1865.599\n```\n:::\n\n```{.r .cell-code}\nnegative_log_likelihood_initial <- -sum(dpois(\n    x = outbreak$Cases[-1],\n    lambda = out_init$Incidence[-1], # This is from the previous section!\n    log = TRUE\n))\nnegative_log_likelihood_initial\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1865.599\n```\n:::\n:::\n\n\nNow we're in a place to use `optim` again, just like we've done previously.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noptim_NM <- optim(\n    par = init_parameters,\n    fn = negative.log.likelihood,\n    method = \"Nelder-Mead\",\n    hessian = TRUE\n)\n\n# Check for convergence\noptim_NM$convergence # 0 - converged; 1 - failed\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\n# Back-transform parameters\nc(inverse.logit(optim_NM$par[c(\n    \"emergency_efficacy\",\n    \"curfew_efficacy\"\n)]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nemergency_efficacy    curfew_efficacy \n         0.7907816          0.9164450 \n```\n:::\n\n```{.r .cell-code}\n# Inspect the optimal negative log-likelihood\noptim_NM$value\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 372.4239\n```\n:::\n:::\n\nThis looks pretty good, and so we can be reasonably happy we've reached an optimal solution. Now that we have a solution, let's plot it.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noptimal_parameters <- parameters\noptimal_parameters[c(\n    \"emergency_efficacy\",\n    \"curfew_efficacy\"\n)] <- inverse.logit(optim_NM$par[c(\n    \"emergency_efficacy\",\n    \"curfew_efficacy\"\n)])\n\n\n\n# Solve the model given the optimal parameters and initial conditions\noptimal_solution <- solve.intervention.model(\n    y_ = state,\n    times_ = times,\n    func. = COVID.intervention,\n    parms = optimal_parameters\n)\n\n\n# Calculate the observational confidence intervals\noptimal_solution <- optimal_solution %>%\n    mutate(\n        lower50 = qpois(p = 0.25, lambda = Incidence), # 50% confidence interval (i.e., 25 - 75th centiles)\n        upper50 = qpois(p = 0.75, lambda = Incidence),\n        lower95 = qpois(p = 0.025, lambda = Incidence), # 95% confidence interval (i.e., 2.5 - 97.5th centiles)\n        upper95 = qpois(p = 0.975, lambda = Incidence)\n    )\n\nggplot(outbreak) +\n    geom_col(\n        aes(x = Date, y = Cases),\n        width = 1.0,\n        fill = \"dodgerblue2\",\n        colour = \"blue\"\n    ) +\n    geom_ribbon(\n        data = optimal_solution[-1, ],\n        aes(x = Date, ymin = lower50, ymax = upper50),\n        fill = \"firebrick2\", colour = \"firebrick2\", alpha = 0.8\n    ) +\n    geom_ribbon(\n        data = optimal_solution[-1, ],\n        aes(x = Date, ymin = lower95, ymax = upper95),\n        fill = \"firebrick2\", colour = \"firebrick2\", alpha = 0.5\n    ) +\n    ylab(\"Daily cases\") +\n    xlab(\"\") +\n    ggtitle(\"Intervention model fit (optimized)\") +\n    geom_vline(\n        aes(xintercept = emergency_start_date),\n        linetype = \"dashed\"\n    ) +\n    geom_vline(\n        aes(xintercept = curfew_start_date),\n        linetype = \"dashed\"\n    ) +\n    annotate(\n        geom = \"text\",\n        label = c(\"lockdown\", \"Curfew\"),\n        x = c(emergency_start_date, curfew_start_date),\n        y = c(175, 175),\n        angle = 90,\n        vjust = 1.5\n    ) +\n    theme_bw()\n```\n\n::: {.cell-output-display}\n![](session9_modelling_interventions_in_r_files/figure-html/optimal-plot-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nGreat! The fit looks reasonable, at least visually. To report on parameter uncertainty, we use the same tricks as last time, with the square root of the diagonals of the hessian matrix.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncovar_matrix <- solve(optim_NM$hessian)\nstd_errors <- sqrt(diag(covar_matrix))\nestimates_transformed <- data.frame(\n    estimate = optim_NM$par,\n    std_error = std_errors\n) %>%\n    dplyr::mutate(\n        lower95CI = estimate - 1.96 * std_error,\n        upper95CI = estimate + 1.96 * std_error\n    )\nestimates_transformed\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   estimate  std_error lower95CI upper95CI\nemergency_efficacy 1.329643 0.05962182  1.212785  1.446502\ncurfew_efficacy    2.394996 0.04658667  2.303686  2.486306\n```\n:::\n\n```{.r .cell-code}\n# Back-transform estimates and confidence intervals\nestimates <- inverse.logit(estimates_transformed[, -2])\nestimates\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                    estimate lower95CI upper95CI\nemergency_efficacy 0.7907816 0.7707913 0.8094595\ncurfew_efficacy    0.9164450 0.9091819 0.9231762\n```\n:::\n:::\n\n\nWhat do you see in these plots and estimates?\n<textarea name='Text1' cols='127' rows='2'></textarea>\n\nWhich type of uncertainty does this capture? What other types of uncertainty should we consider?\n<textarea name='Text1' cols='127' rows='2'></textarea>\n\n# Exploring counterfactuals\nNow we have a model for the COVID-19 transmission in Thailand, and we have estimates of how effective the two stages of interventions were (emergency and curfew), we can now explore what *could* have happened, or the **counterfactuals**.\n\nWhat could have happened if no intervention was applied?\n<textarea name='Text1' cols='127' rows='2'></textarea>\n\nWhat could have happened if we started the emergency stage earlier?\n<textarea name='Text1' cols='127' rows='2'></textarea>\n\nWhat other interesting counterfactual scenarios could we explore?\n<textarea name='Text1' cols='127' rows='2'></textarea>\n\nWhich of the scenarios you suggested previously might be of interest to the general public and why? Would the scenarios of interest to decision makers be different? If so, how and why?\n<textarea name='Text1' cols='127' rows='2'></textarea>",
    "supporting": [
      "session9_modelling_interventions_in_r_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}