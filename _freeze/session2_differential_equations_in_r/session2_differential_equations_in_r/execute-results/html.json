{
  "hash": "84d639bc88bbf5d1edc6b11e327f1c4e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Differential Equations in R\"\nsubtitle: SPARKLE short course 'Mathematical Modelling of Infectious Diseases'\ndescription: \"Solving ordinary differential equations in R\"\nformat:\n    training-html:\n        presenter: Michael Lydeamore, Monash University & Eamon Conway, Walter and Eliza Hall Institute\n        contributors:\n            - Michael Meehan, Australian Institute of Tropical Health & Medicine, James Cook University\n            - Rhondda Jones, Australian Institute of Tropical Health & Medicine, James Cook University\n---\n    \n\n::: {.cell}\n\n:::\n\n\n## Open a new script file for this session\n\nWe have put a file in the `./student_materials` folder and given it a meaningful name, `session2_differential_equations_practical`.\n\n## Code summary\nIt is good practice to write a short description of your code to summarise its purpose for future users. Below is an example of such a description. Open RStudio, create a new file and copy and paste the code chunk below into your editor to start writing your own code:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n###################################################\n## DIFFERENTIAL EQUATIONS IN R PRACTICAL SESSION##\n###################################################\n\n# A model for COVID-19\n# Some R code to numerically solve a set of ordinary differential equations\n# and then plot the results\n```\n:::\n\n**1.1** What does the `#` character mean in the R language?\n<textarea cols=\"127\" rows=\"1\"></textarea>\n\n\n\n###Set working directory\n\nYou must let R know the location of any files you plan to import, so remember to set your working directory. The most reproducible way to do this is to use an RStudio Project, combined with the `here` package. Projects do a few things:\n\n* Store project specific settings\n* Project-specific .Rhistory, .Rprofile and a handful of other files\n* Add a handy little piece of text on your RStudio icon\n* Store it's own history\n* Set your working directory to the project-specific top-level folder.\n\nThey come with a file, ending in `.Rproj`, which you can open directly to open the project in RStudio.\n\n*Note that RStudio Project are specific to RStudio*. If you change editor they won't work.\n\nTo set up an RStudio project, go to File > New Project. Name it something useful. Now, our working directory is set.\n\nIf you don't want to use an RStudio Project (you should), then you can manually set the working directory by going to Session > Set Working Directory > To Source Location\n\nAlternatively, copy and paste the code chunk below into your editor, and edit according to your computer to continue writing your code:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Windows\n# setwd('your_path_goes_here')\nsetwd(\"your_path_goes_here\")\n# we recommend that you put it in '.\\student_materials'\n# Mac OSX\n# setwd(\"./workshop\")\n```\n:::\n\n\n# Material\n\nIn this session, we will go through some more advanced R programming topics, including how to solve differential equations using the `deSolve` package.\n\nPart 1 covers:\n\n* Background on differential equations\n* Setting up differential equations in `deSolve`\n* Solving differential equations in `deSolve`\n\nPart 2 covers:\n\n* Systems of differential equations\n* Solving coupled DEs using `deSolve`\n\n*We recommend to save your text at the end of each part by printing the file.*\n\n# Part 1: Solving differential equations\n\n## Differential equations\nDifferential equations are equations that describe the rate of change of some quantity (or quantities) with respect to an independent variable, typically time or space. For example, the rate per unit time at which chemical compounds are formed in chemical reactions, or at which heat dissipates from an object can often be described by systems of differential equations.\n\nThe package `deSolve` is used to solve systems of initial value problem differential equations within the R programming language. The package is based on previously developed `FORTRAN` routines and many `deSolve` functions are wrappers around existing FORTRAN codes.\n\nAs described in the `deSolve` introductory manual, differential equations are implemented and solved in R through two separate steps: model specification and model application. In the first step, model specification, the user is required to define the model parameters and state variables and implement the derivative function. In the next step, model application, the user specifies a time lattice upon which the solution to the differential equation should be returned and integrates the differential equations using the functions available in the `deSolve` package.\n\nIn this chapter we will implement several examples of systems of differential equations and use the `deSolve` package in R to solve them. (See [`deSolve` manual](https://cran.r-project.org/web/packages/deSolve/deSolve.pdf).)\n\n\n## Simple example: population growth\n\nTo guide you through the model specification and application steps described above, we will start with an easy example: modelling population growth. One of the simplest models of population growth is the Malthusian model which assumes that a population of size $N(t)$ grows at a rate proportional to its current size. That is, the growth rate per unit time of the population size obeys the relation\n\n$$\\frac{dN(t)}{dt} \\propto N(t)$$\n\n(where the symbol $\\propto$ means \"is proportional to\"). In this case, the larger the current population size $N(t)$, the faster it grows.\n\nWe can convert the proportionality relation given above into a standard differential equation by introducing the population growth rate $r$:\n\n$$\\frac{dN(t)}{dt} = rN(t)$$\n\nThis differential equation is one dimensional, ie it has only one state variable: $N(t)$; and it has a single parameter: the growth rate $r$. Note that in this example, and those that follow, we will always include the time dependence of state variables to help distinguish them from model parameters.\n\nIn order to fully specify the model mathematically we must provide an initial condition, ie the population size $N$ at time $t=0$, which we denote as $N(t=0)=N_0$. Here we take\n\n\\begin{align}\nr &= 2 \\\\\nN_0 &= 1\n\\end{align}\n\nGiven values for the growth rate $r$ and the initial population size $N_0$ we can now integrate (ie solve) our differential equation to determine the population size $N(t)$ at future times $t>0$.\n\n### Library loading\nBefore doing anything else, let's install the `deSolve` package and then load it into our workspace. We'll also need the `tidyverse`, which is a bunch of packages that make working with data a bit easier in R.\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(deSolve)\nlibrary(tidyverse)\n```\n:::\n\nIf you get an error while trying to load the package, make sure to install it through RStudio.\n\n### Setting up the differential equation\nThe first step in solving a differential equation in `deSolve` is to specify our model parameters and initialize our state variables\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Define model parameters and store values in a labelled vector\nparameters <- c(r = 2) # Growth rate\n\n# Specify the initial conditions, define state variables and assign initial values\ninitN <- 1 # Start with an initial population size N(0) = 1\nstate <- c(N = initN) # Specify the state variables and initialize them to their initial values\n```\n:::\n\n\nThe model parameters, which in this case is just the growth rate $r$, have been stored in the _labelled_ vector `parameters`; and the state variables and their initial conditions have been defined in the vector `state`. Here we have been careful to ensure that the parameter and state variables are stored as vectors with assigned names and values.\n\nNext, we specify the model differential equation (given above) as a user-defined R function:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# We specify the system of differential equations as a function in R\n# Here we specify a function with three arguments:\n# 1. t : time, which is the dependent variable in our case\n# 2. state : a vector of state variables\n# 3. parameters : a vector of parameters (ie fixed variables)\npopmodel_exponentialgrowth <- function(t, state, parameters) {\n    # Initialize an environment with the elements of state and parameters as local variables\n    with(as.list(c(state, parameters)), {\n        dNdt <- r * N # The model equation\n        list(c(dNdt)) # Return the population growth rate dNdt\n    })\n}\n```\n:::\n\n\nIn the function definition given above we have used the `with(as.list(c(state, parameters),{...})` statement to create an _environment_ that allows us to access the `state` and `parameter` variables directly by name within our function `popmodel_exponentialgrowth`. If we didn't use `with`, then we would have to refer to all of our parameters and states using the name notation, such as `parameters['r']`.\n\nThe user-defined function `popmodel_exponentialgrowth`, which calculates and returns the rate of change of each of our state variables, is the function that we will pass to `ode` from `deSolve` in order to solve the differential equation. However, before we can do this, we first need to specify a time lattice over which we wish our solution to our differential equation to be returned:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Start with an initial time of t=0 and solve up to t=5 with time increments of 0.01\ntimes <- seq(from = 0, to = 5, by = 0.01)\n```\n:::\n\n\nNote that the sequence of times defined here by the user only specifies the lattice points at which we require an estimate of the solution, in this case the population size. In general, if the `times` sequence consists of time points `t1`, `t2`, `t3`, `…` the `ode` solver will return an estimate of the solution `N(t1)`, `N(t2)`, `N(t3)`, `...`. Importantly, the vector times is not related to the time step used by the numerical integration routine adopted by the ode solver in `ode`.\n\nWe now have all of the ingredients we require to solve our simple population growth model and are ready to call the `ode` integration function:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Here we specify four arguments of the ode function:\n# 1. y : the state variables\n# 2. times : the time lattice over which we solve the differential equation\n# 3. func : our differential equation given in terms of our state variables and model parameters\n# 4. parms : our model parameters\nout <- ode(y = state, times = times, func = popmodel_exponentialgrowth, parms = parameters)\n```\n:::\n\n\nIn the code above we call the `ode` function to numerically integrate our differential equation `popmodel_exponentialgrowth` and store the solution in the `deSolve` object `out`. To view the first few lines of output we can type\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhead(out)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     time        N\n[1,] 0.00 1.000000\n[2,] 0.01 1.020202\n[3,] 0.02 1.040812\n[4,] 0.03 1.061839\n[5,] 0.04 1.083289\n[6,] 0.05 1.105173\n```\n\n\n:::\n:::\n\n\nHere we see that the solution $N(t)$ is given at each time point specified in the time lattice times, ie at intervals of $\\Delta t=0.01$ from $t=0$ up to $t=10$. Notice that the first value of the solution $N$ at time $t=0$ is the initial value we specified above, `initN = 1`.\n\n### Plotting the solution\n`ggplot` doesn't know how to deal with `deSolve` outputs directly, so we have to turn it into a `data.frame` using `as.data.frame`. Then, having done that, we can map our x and y axes and plot the solution:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = as.data.frame(out), aes(x=time, y=N)) +\n    geom_line() +\n    labs(x = \"Time, t\", y=\"Population size, N(t)\")\n```\n\n::: {.cell-output-display}\n![](session2_differential_equations_in_r_files/figure-html/de-growth-visualise-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nThe plotted solution shows a population that grows exponentially with time rapidly increasing in size to >20,000 individuals.\n\nUsing the solution provided by the `ode()` function call and returned in the object `out`, determine the time interval during which the population size $N$ exceeded 1000.\n<textarea cols=\"127\" rows=\"2\"></textarea>\n\nIt is important to realize that rounding errors are inevitable during numerical integration and there is no guarantee that the solution generated by the `ode` function is accurate. Therefore, whenever possible, you should always validate your solution with known analytical results or approximations. Fortunately for our case, an exact analytical solution to the differential equation given above exists:\n\n$$\\frac{dN(T)}{dt} = rN(t) \\quad \\Rightarrow \\quad N(t) = N_0 e^{rt}$$\n\nwhere $e$ is Euler's number (=2.718282...). Given this analytical solution we can check the accuracy of our numerical solution by plotting the two solutions on the same graph:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Create a coarse time lattice for display purposes\ntimes_coarse <- seq(from = 0, to = 5, by = 1)\n# Calculate the exact solution given the model parameters and initial conditions\nNexact <- initN * exp(parameters[\"r\"] * times_coarse)\n\nexact_solution <- data.frame(time = times_coarse, Nexact)\n\nggplot() +\n    geom_line(data = as.data.frame(out), aes(x=time, y=N, colour=\"Numeric\")) +\n    geom_point(data = exact_solution, aes(x=time, y=Nexact, colour=\"Exact\")) +\n    labs(x = \"Time, t\", y=\"Population size, N(t)\", colour=\"\") +\n    scale_color_manual(values=c(\"red\",\"black\"))\n```\n\n::: {.cell-output-display}\n![](session2_differential_equations_in_r_files/figure-html/de-growth-visualise-compare-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nFrom the figure above we can see that the numerical solution obtained using the `ode` function (and its default parameter settings) provides a very accurate approximation of the exact model solution.\n\nRepeat your earlier calculation for the time taken for $N(t)>1000$, this time using the exact analytical solution for the population size $N(t)$. Compare your answer with the numerical result.\n<textarea cols=\"127\" rows=\"2\"></textarea>\n\nWhen exact, or even approximate analytical solutions are not available, another way to validate your numerical solution is by decreasing the time step to see if the solution varies substantially. If the solution is stable, eventually you should notice very little difference in the numerical solution as you continually decrease the time step, ie it should converge. This can be adjusted in the ode function using the rtol and atol parameters which set the relative and absolute error tolerances accepted during the integration routine (see [`deSolve` manual](https://cran.r-project.org/web/packages/deSolve/deSolve.pdf).)\n\n\n\n# Part 2: Multi-dimensional systems\n\n\n## Exercise: The SIR epidemic model\n\nTo model the spread of infectious diseases it is common to split the population up into three disease states: $S$, susceptible to infection; $I$, infected and infectious; $R$, recovered. During an outbreak the rates of change of each of these three populations can be described using the following system of (coupled) differential equations:\n\n\\begin{align}\n    \\frac{dS(t)}{dt}&=-\\beta \\frac{S(t)}{N}I(t)\\\\\n    \\frac{dI(t)}{dt}&=\\beta \\frac{S(t)}{N}I(t)-\\gamma I(t)\\\\\n    \\frac{dR(t)}{dt}&=\\gamma I(t).\n\\end{align}\n\nThis system is known as the SIR model of disease transmission and contains two parameters: the infection transmission rate, $\\beta$; and the recovery rate, $\\gamma$.\n\nTaking parameter values\n\n\\begin{align}\n    \\beta&=5\\\\\n    \\gamma&=1\n\\end{align}\n\nand initial conditions\n\n\\begin{align}\n    S_0 &= 199\\\\\n    I_0 &= 1\\\\\n    R_0 &= 0\n\\end{align}\n\nsolve the SIR model following the same steps described above for the predator-prey model. Plot your solution to generate the following figure:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](session2_differential_equations_in_r_files/figure-html/sir-model-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n# Exercises\n\n1. Describe the epidemic trajectory for the parameter values provided: When did the epidemic peak occur? What was the final size (total number of people infected) of the epidemic outbreak?\n<textarea cols=\"127\" rows=\"2\"></textarea>\n\n2. The basic reproduction number $R_0$ is defined as the average number of new cases generated by a typical infectious individual when introduced into a totally susceptible population. For the SIR model described above, the basic reproduction number is $R_0 = \\beta S_0 / (\\gamma N)$. Calculate the $R_0$ for the parameter values given above.\n<textarea cols=\"127\" rows=\"2\"></textarea>\n\n3. By considering a range of values for the transmission rate $\\beta$, describe how the epidemic trajectory varies as a function of $R_0$. In particular, what happens when $R_0<1$?\n<textarea cols=\"127\" rows=\"2\"></textarea>\n\n4. The quantity $R_e(t) = \\beta S(t)/(\\gamma N)$ is called the effective reproduction number and it accounts for the depletion of susceptibles as the infection sweeps through the population. Review your previous results and record the value of $S(t_{peak})$ where $t_{peak}$ is the time at which the infectious population reaches its maximum, ie the epidemic peak. Using these values of $S(t_{peak})$ calculate $R_e(t_{peak})$ and report any patterns that you observe.\n<textarea cols=\"127\" rows=\"2\"></textarea>\n\n5. If the reproduction number gives the multiplicative growth rate in the number of infectious individuals can you explain your observations from the previous two questions.\n<textarea cols=\"127\" rows=\"2\"></textarea>\n\n# \n<input type=\"button\" value=\"Print this page\" onclick=\"window.print()\">\n\n# Extension exercises\n\n::: {.panel-tabset}\n\n## Logistic population growth\n\nFrom the figures we have generated so far you might have noticed that the Malthusian growth model is probably not appropriate in most settings (Why? Try solving the model over a longer time horizon to find out). A more realistic model of population growth is given by the logistic growth model where the growth rate $r$ now varies as a function of the population size:\n\n$$ r \\rightarrow r\\left(1 - \\frac{N(t)}{k}\\right)$$\n\nsuch that the rate of change in population size $dN(t)/dt$ becomes\n\n$$\\frac{dN(t)}{dt} = rN(t) \\left(1-\\frac{N(t)}{K}\\right).$$\n\nNotice we have now introduced a new parameter in our model: the carrying capacity, $K$.\n\nYour task is to adapt the code sequence above which we used to solve the Malthusian (exponential) growth model to solve the logistic growth model. You may take the following values for the model parameters and state variables:\n\n\\begin{align}\nr &= 0.15 \\\\\nK &= 1000 \\\\\nN_0 &= 1\n\\end{align}\n\nYou will have to first determine what the model state variables and parameters are and then write your own function to evaluate the logistic function according to the above equations. \n\n### Exercises\n\n1. How does the logistic growth model vary from the exponential model?\n<textarea cols=\"127\" rows=\"2\"></textarea>\n\n2. How does varying the parameter $K$ vary the solution?\n<textarea cols=\"127\" rows=\"2\"></textarea>\n\n3. What happens if you change the initial conditions?\n<textarea cols=\"127\" rows=\"2\"></textarea>\n\nOnce again, an exact solution to our differential equation is available - it is given by\n\n$$N(t) = \\frac{K}{1+\\left(\\frac{K}{N_0}-1\\right)e^{-rt}}$$\n\nUsing this exact solution, check the accuracy of your numerical solution. Your answer should look something like the figure below:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](session2_differential_equations_in_r_files/figure-html/logistic-growth-de-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Lotka-Volttera Model\n\nOften we are interested in dynamical systems that are described in terms of several state variables $(x1(t),x2(t),…,xn(t))$. For example, in chemical reactions we may want to track the concentrations of several reactants and products through time, or in ecological studies the population sizes of various species. In these cases we expect a system of differential equations, often one for each state variable:\n\n\\begin{align}\n    \\frac{dx_1 (t)}{dt}&=f_1 (x_1,x_2,,…,x_n,t)\\\\\n    \\frac{dx_2 (t)}{dt}&=f_2 (x_1,x_2,…,x_n,t)\\\\\n    \\vdots \\\\\n    \\frac{dx_n (t)}{dt}&=f_n (x_1,x_2,…,x_n,t).\n\\end{align}\n\nOn the left we have the rate of change of each state variable $x_i(t)$ and on the right we have a function $f_i$ describing that state's rate of change. Notice that in the general case, each of the rate of change functions $f_i≡fi(x_1,x_2,...,x_n,t)$ is a function of the other state variables in the system, ie the derivative of $x_i$ may (most likely) depend on the current values of the remaining state variables, $x_j$. If this is the case we say that our system of differential equations is coupled.\n\nLet us look at a specific example of a coupled set of differential equations. Consider a simple model of two interacting animal populations first described by Lotka (and later by Volterra). One species is the prey whilst the other is the predator. We shall denote their population sizes at time as $x(t)$ and $y(t)$ respectively.\n\n<center>\n\n![](predator_prey_image.PNG)\n\n</center>\n\nIn the Lotka-Volterra model the growth rates of the two populations are given by the following system of differential equations:\n\n\\begin{align}\n    \\frac{dx(t)}{dt}&=\\alpha x(t)-\\beta x(t)y(t),\\\\        \n    \\frac{dy(t)}{dt}&=\\delta x(t)y(t)- \\gamma y(t). \n\\end{align}\n\nIn the system above, $\\alpha$ is the growth rate of the prey population; $\\beta$ is the predation rate; δ is the growth rate of the predator population $\\delta$ and; $\\gamma$ is the death rate of the predator population. Note that the two animal populations interact through the predation term $\\beta x(t)y(t)$.\n\nTo complete the description of our model we supply initial conditions for the predator and prey populations which we denote $x_0$ and $y_0$ respectively. In particular we take for parameter values and initial conditions: $\\alpha=1$, $\\beta=2$, $\\delta=1$ and $\\gamma=1$; $x_0=2$ and $y_0=0.5$.\n\nThe below code blocks provide parameters and initial conditions for the system:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Define model parameters and store values in a labelled vector\nparameters <- c(\n    alpha = 1, # prey growth rate\n    beta = 2, # predation rate\n    delta = 1, # predator growth rate\n    gamma = 1 # predator death/removal rate\n)\n```\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Specify the initial conditions\ninitx <- 2 # Initial prey population size\ninity <- 0.5 # Initial predator population size\n\n# Define the state variables and assign initial values\nstate <- c(x = initx, y = inity)\n```\n:::\n\n\nYour task is to solve the differential equation over the following time lattice:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Specify the initial and final times of the solution vector\ntinit <- 0 # Initial time\ntfinal <- 20 # Final time\nstep_size <- 0.1 # Time increment\ntimes = seq(from = tinit, to = tfinal, by = 0.1) # Time vector\n```\n:::\n\n\nYou need to create the function that evaluates the differential equation and create the following plot:\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](session2_differential_equations_in_r_files/figure-html/predator-prey-plot-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n:::",
    "supporting": [
      "session2_differential_equations_in_r_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}