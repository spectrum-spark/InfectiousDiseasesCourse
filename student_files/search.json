[
  {
    "objectID": "InfectiousDiseasesCourse.html",
    "href": "InfectiousDiseasesCourse.html",
    "title": "InfectiousDiseasesCourse",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#what-is-a-model",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#what-is-a-model",
    "title": "Introduction to Mathematical Modelling",
    "section": "What is a model?",
    "text": "What is a model?\n\nA simplified descritpion of a system or process used to aid understanding \nA model is useful if it provides relevant (and correct) information for a particular purpose/question\nA model is efficient if it will do this with minimal inputs and without providing superfluous information"
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#why-use-mathematical-models",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#why-use-mathematical-models",
    "title": "Introduction to Mathematical Modelling",
    "section": "Why use mathematical models?",
    "text": "Why use mathematical models?"
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#types-of-infectious-disease-model",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#types-of-infectious-disease-model",
    "title": "Introduction to Mathematical Modelling",
    "section": "Types of infectious disease model",
    "text": "Types of infectious disease model\nCovered in this course:\n\nMechanistic models\n\nDescribe the biological mechanism in mathematical language\nCan reproduce previous trends and also predict future impacts of interventions\n\nEconomic models\n\nFocus on the cost specific disease burden and control\nAssess the cost-effectiveness of competing interventions\n\n\nNot covered in this course:\n\nBioinformatics\n\nMainly for the analysis and interpretation of genetic data\n\nStatistical models\n\nData-driven and describe historical trends and relationships such as auto-regressive models\n\nSpatial models (though they will be discussed briefly)\nFocus on spatially heterogeneous systems\n\nThere are many examples of hybrid models that span several of these categories."
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#model-complexity---or-not",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#model-complexity---or-not",
    "title": "Introduction to Mathematical Modelling",
    "section": "Model Complexity - or not!",
    "text": "Model Complexity - or not!\n\nModels should be formulated based on understanding of disease mechanisms, available information and policy questions\nModels should be as simple as possible, but no simpler \nSome models are simple but useful\nThe more functions a model performs, the more complex it becomes\nFaster processing speed, new methods and technology allow for more complexity\n\nbut this is not always superior\n\n\nAdvice: start simple and build"
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#summary-1",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#summary-1",
    "title": "Introduction to Mathematical Modelling",
    "section": "Summary",
    "text": "Summary\nThis is a practical session in which, individually or as part of a group, you will simulate an epidemic using some simple apparatus. The objective of this exercise is to simulate and graphically illustrate the SIR compartmental model."
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#materials",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#materials",
    "title": "Introduction to Mathematical Modelling",
    "section": "Materials",
    "text": "Materials\n\nThree types of beans of a similar size but different colours, 20 of each type\nAn A4 piece of paper, folded in quarters in concertina style\nOne cup"
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#instructions",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#instructions",
    "title": "Introduction to Mathematical Modelling",
    "section": "Instructions",
    "text": "Instructions\n\nAssign a state for each type of bean:\n\n\n\n\n\nState variable\nColour of Bean\n\n\n\n\nSusceptible (S)\n\n\n\nInfectious (I)\n\n\n\nRecovered (R)\n\n\n\n\n\nEach time step is one week. For the first time step, place 19 susceptible beans in the cup along with one infectious bean. Pour the beans in a line on your folded paper. Record your result in the table below for week 1. Check that your total population, P, remains at 20 throughout the experiment.\n\n\n\n\n\n\n\n\n\n\n\nWeek\nS\nI\nR\nP\n\n\n\n\n1\n\n\n\n\n\n\n2\n\n\n\n\n\n\n3\n\n\n\n\n\n\n4\n\n\n\n\n\n\n5\n\n\n\n\n\n\n6\n\n\n\n\n\n\n7\n\n\n\n\n\n\n8\n\n\n\n\n\n\n9\n\n\n\n\n\n\n10\n\n\n\n\n\n\n\n\nThe infectious bean can infect susceptible neighbours so replace any susceptible neighbours with infectious beans. The infectious period is one week, so keep track of the original infected bean and replace it with a recovered bean. Record the numbers of susceptible, infectious and recovered individuals in the table above for week 2.\nOnce the status of the individuals has been updated, place the beans in the cup. Then pour them out again. Replace all susceptible neighbours of infectious beans with new infectious beans (recovered beans are immune and cannot be infected). Don’t forget to replace the original infected beans with recovered beans. Record the numbers of susceptible, infectious and recovered individuals in the table above for week 3.\nRepeat until you reach 10 weeks."
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#recording-results-in-r",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#recording-results-in-r",
    "title": "Introduction to Mathematical Modelling",
    "section": "Recording results in R",
    "text": "Recording results in R\nHere is some code to record and plot your results in R. Open RStudio, open from your folder “lesson1_introduction_beans.R” using the Session tab, Set Working Directory / To Source File Location. Copy and paste the code chunk below into your editor. Then replace the default results with your own.\n\n# Mathematical Modelling of Infectious Diseases\n###################################################\n## INTRODUCTION TO MATHEMATICAL MODELLING PRACTICAL SESSION## \n###################################################\n\n# Record and plot simulated epidemics\n\n# create a matrix to store experimental results\nresult <- matrix(NA,nrow=10,ncol=5)\n# weeks\nresult[,1]<-1:10 # weeks\n\n# replace with your S count for each week\nresult[,2]<-c(19, 17, 13,  9,  5,  2,  1,  1,  1,  1) # S\n\n# replace with your I count for each week\nresult[,3]<-c(1, 2, 4, 4, 4, 3, 1, 0, 0, 0) # I\n\n# replace with your R count for each week\nresult[,4]<-c(0,  1,  3,  7, 11, 15, 18, 19, 19, 19) # R"
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#checking-results-in-r",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#checking-results-in-r",
    "title": "Introduction to Mathematical Modelling",
    "section": "Checking results in R",
    "text": "Checking results in R\n\nWrite a line of R code to calculate the sum S+I+R for each week and assign this to column 5 of the results matrix.\n\nType results[, 5] in your console. What do you see and why?"
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#plotting-results-in-r",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#plotting-results-in-r",
    "title": "Introduction to Mathematical Modelling",
    "section": "Plotting results in R",
    "text": "Plotting results in R\nCopy and paste the code chunk below into your editor to plot your results:\n\nlibrary(ggplot2)\nggplot() +\n    geom_point(aes(x=result[, 1], y=result[, 3]), colour=\"red\") +\n    ggtitle(\"My simulated epidemic\") +\n    labs(x=\"Time in weeks\", y=\"I\")\n\n\n\n\n\n\n\n\n\nHow does your result differ from the above plot?\n\nWhy would we expect a different result if we did the bean counting experiment again?"
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#summary-2",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#summary-2",
    "title": "Introduction to Mathematical Modelling",
    "section": "Summary",
    "text": "Summary\nThis will be an interactive lecture session to familiarise you with some of the theory and methods for compartmental modelling. Notes appear below for your reference with a few questions thrown in."
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#the-characteristic-epidemic-curve",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#the-characteristic-epidemic-curve",
    "title": "Introduction to Mathematical Modelling",
    "section": "The characteristic epidemic curve",
    "text": "The characteristic epidemic curve\n\n4 regions: Exponential; Saturation; Decline; Post epidemic behaviour \n\n\nThinking like a mathematical modeller\n\nWhat are the mechanistic reasons for the shape?"
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#the-basic-reproduction-number-r_0",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#the-basic-reproduction-number-r_0",
    "title": "Introduction to Mathematical Modelling",
    "section": "The basic reproduction number, \\(R_0\\)",
    "text": "The basic reproduction number, \\(R_0\\)\n\\(R_0\\) is defined as the average number of new infections that result from a single infection introduced into a totally susceptible population. This will depend on:\n\nThe number of contacts per unit time (e.g. week\\(^{−1}\\)), \\(c\\)\nThe probability of infection given a contact between an infectious and a susceptible individual, \\(p\\)\nThe duration of infection, \\(D\\)\n\nThe equation for the basic reproduction number is \\[R_0=pcD.\\] The product, \\(pc\\), can be replaced by the single parameter, \\(\\beta\\), defined as the effective contact rate per unit time."
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#estimating-r_0-from-your-simulation-experiment",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#estimating-r_0-from-your-simulation-experiment",
    "title": "Introduction to Mathematical Modelling",
    "section": "Estimating \\(R_0\\) from your simulation experiment",
    "text": "Estimating \\(R_0\\) from your simulation experiment\n\nFor \\(D\\), what were the value and units for the duration of infection?\n\nFor \\(p\\), what was the probability of an infected individual (bean) infecting a susceptible neighbour?\n\nFor \\(c\\), what was the average number of contacts for each individual?\n\n\n\n\n\n\n\n\nTip\n\n\n\nDon’t forget either end of the line!\n\n\n\nExplain why the basic reproduction number is 1.9."
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#saturation",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#saturation",
    "title": "Introduction to Mathematical Modelling",
    "section": "Saturation",
    "text": "Saturation\nNot all contacts are with susceptible individuals: \n\nSome theory\n\nThe effective reproduction number Rt is defined as the average number of new infections caused by an infected individual at any stage during the epidemic when there will be both susceptible and recovered (thus immune) individuals present\n\\(R_t=R_0 x^∗\\) varies over time depending on the fraction of the population susceptible, \\(x^∗=\\left(\\frac{S}{pop}\\right)\\)\nIncidence of infections increases when \\(R_t>1\\) and declines when \\(R_t<1\\). Thus the critical proportion susceptible, \\(x^∗\\), can be calculated for R_t=1: \\[R_t=1\\Rightarrow R_0x^∗=1 \\Rightarrow x^∗=\\frac{1}{R_0}\\]"
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#implications-for-vaccination",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#implications-for-vaccination",
    "title": "Introduction to Mathematical Modelling",
    "section": "Implications for vaccination",
    "text": "Implications for vaccination\n\nCritical proportion immune or the herd immunity threshold: \\[HIT = 1-x^* \\Rightarrow HIT = 1 - \\frac{1}{R_0}\\]\n\n\nUsing the HIT formula, explain why a target vaccination coverage of over 50% would be sufficient to control the spread of infection in your simulated epidemic.\n\nIf the target coverage for a particular vaccine is 90%, what can you infer about the \\(R_0\\) of the pathogen in question?"
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#building-models",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#building-models",
    "title": "Introduction to Mathematical Modelling",
    "section": "Building models",
    "text": "Building models\nTo design your own mathematical model you must understand * The research question * The natural history of the infection * What data are available\nYou will learn to * Write the model in the form of ordinary differential equations (ODEs) * Run the model using suitable software\nYou will use your model, for example to predict the effect of interventions"
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#compartmental-models",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#compartmental-models",
    "title": "Introduction to Mathematical Modelling",
    "section": "Compartmental models",
    "text": "Compartmental models\n\nEach box (compartment, state) has an equation\nEach arrow (flow) has a rate \n\n\nExample: The SIRS model\n\nHas three states so has three equations\nThe rate at which susceptible individuals become infected is special because it depends on the proportion of the population that is infected at each time \\(I(t)\\)\nWe define the force of infection, \\(\\lambda(t) = \\beta I(t)\\). \n\n\n\nSome definitions\nA parameter is a constant value used in the model which usually has some biological significance. For example the duration of infection is a parameter\n\nWhat is the name of another model parameter and it’s meaning?\n\n\nA variable is a value in the model that can change over time. All the states are known as state variables for this reason\n\nWhat is the name of a model variable which is not a state variable?\n\n\nPrevalence is the proportion or percentage of the population infected at any time\n\nWhat is the formula for prevalence in terms of the model states and parameters?\n\n\nIncidence is the number of new cases per unit time and is given by the rate into the infected compartment \\[\\text{incidence} = \\lambda(t)S(t)\\]\n\n\nModel assumptions\n\nAll models have assumptions, so what does the example SIRS model assume?\nDeterministic dynamics\n\nNo role for chance, model is ‘predetermined’\n\nPopulation is stratified in broad groups (i.e. compartments). Within each compartment, individuals are homogeneous\n\n\nWhat does this mean?\n\n\n\nHomogenous mixing\n\n\nWhat does this mean?\n\n\n\nDynamic transmission\n\n\nWhat does this mean?\n\n\n\n\n\n\n\n\nTip\n\n\n\nThink special rates\n\n\n\nClosed population\n\n\nWhat does this mean?\n\n\n\n\nCommon model structures\n\n\nSuggest a suitable infectious disease for each of the common model structures listed below.\n\n\n\n\nModel Structure\nSuitable Infectious Disease\n\n\n\n\nSI\n\n\n\nSIS\n\n\n\nSIR\n\n\n\nSIRS\n\n\n\nSEIR\n\n\n\nSEIRS"
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#building-a-compartmental-model-the-problem-for-the-week",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#building-a-compartmental-model-the-problem-for-the-week",
    "title": "Introduction to Mathematical Modelling",
    "section": "Building a compartmental model: the problem for the week",
    "text": "Building a compartmental model: the problem for the week\nWe will write a suitable model structure for COVID-19 and search the literature for data to inform parameter values and for model comparison.\nExamine the figure below and discuss amongst the group or search trusted sources to assist your answer. \n\nWhat is the most suitable structure for a COVID-19 transmission model (SI, SIS, SIR, SIRS, SEIR, SEIRS or other)?\n\nDescribe of sketch a diagram of the model structure. Include information about the compartments and the flows."
  },
  {
    "objectID": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#model-diagram",
    "href": "session1_intro_to_mathematical_modelling/session1_intro_to_mathematical_modelling.html#model-diagram",
    "title": "Introduction to Mathematical Modelling",
    "section": "Model diagram",
    "text": "Model diagram\n\nInstructions\n\nYou can draw a diagram electronically in a program such as PowerPoint, or you can draw your diagram by hand and take a photo\nSave your diagram in one of the following formats: .jpg, .gif, .png\nUpload your diagram using the Choose Files button below\n\n\n\nUpload your image\n\n\nIt is good practice to start with a simple model, that is, a model with many simplifying assumptions which means it is not very realistic. How would you change the model to make it more realistic?\n\n\nRefer to the chart of confirmed COVID cases in Thailand superimposed with interventions: \n\nWhat questions would a policymaker be asking in this scenario? Comment on if and how a model could be used to answer each policy question."
  },
  {
    "objectID": "session2_differential_equations_in_r/session2_differential_equations_in_r.html",
    "href": "session2_differential_equations_in_r/session2_differential_equations_in_r.html",
    "title": "Differential Equations in R",
    "section": "",
    "text": "Open a new script file for this session\nWe have put a file in the ./student_materials folder and given it a meaningful name, session2_differential_equations_practical.\n\n\nCode summary\nIt is good practice to write a short description of your code to summarise its purpose for future users. Below is an example of such a description. Open RStudio, create a new file and copy and paste the code chunk below into your editor to start writing your own code:\n\n###################################################\n## DIFFERENTIAL EQUATIONS IN R PRACTICAL SESSION##\n###################################################\n\n# A model for COVID-19\n# Some R code to numerically solve a set of ordinary differential equations\n# and then plot the results\n\n1.1 What does the # character mean in the R language?\n\n\n\nSet working directory\nYou must let R know the location of any files you plan to import, so remember to set your working directory. The most reproducible way to do this is to use an RStudio Project, combined with the here package. Projects do a few things:\n\nStore project specific settings\nProject-specific .Rhistory, .Rprofile and a handful of other files\nAdd a handy little piece of text on your RStudio icon\nStore it’s own history\nSet your working directory to the project-specific top-level folder.\n\nThey come with a file, ending in .Rproj, which you can open directly to open the project in RStudio.\nNote that RStudio Project are specific to RStudio. If you change editor they won’t work.\nTo set up an RStudio project, go to File > New Project. Name it something useful. Now, our working directory is set.\nIf you don’t want to use an RStudio Project (you should), then you can manually set the working directory by going to Session > Set Working Directory > To Source Location\nAlternatively, copy and paste the code chunk below into your editor, and edit according to your computer to continue writing your code:\n\n# Windows\n# setwd('your_path_goes_here')\nsetwd(\"your_path_goes_here\")\n# we recommend that you put it in '.\\student_materials'\n# Mac OSX\n# setwd(\"./workshop\")\n\n\n\nMaterial\nIn this session, we will go through some more advanced R programming topics, including how to solve differential equations using the deSolve package.\nPart 1 covers:\n\nBackground on differential equations\nSetting up differential equations in deSolve\nSolving differential equations in deSolve\n\nPart 2 covers:\n\nSystems of differential equations\nSolving coupled DEs using deSolve\n\nWe recommend to save your text at the end of each part by printing the file.\n\nPart 1: Solving differential equationsPart 2: Multi-dimensional systems\n\n\n\nDifferential equations\nDifferential equations are equations that describe the rate of change of some quantity (or quantities) with respect to an independent variable, typically time or space. For example, the rate per unit time at which chemical compounds are formed in chemical reactions, or at which heat dissipates from an object can often be described by systems of differential equations.\nThe package deSolve is used to solve systems of initial value problem differential equations within the R programming language. The package is based on previously developed FORTRAN routines and many deSolve functions are wrappers around existing FORTRAN codes.\nAs described in the deSolve introductory manual, differential equations are implemented and solved in R through two separate steps: model specification and model application. In the first step, model specification, the user is required to define the model parameters and state variables and implement the derivative function. In the next step, model application, the user specifies a time lattice upon which the solution to the differential equation should be returned and integrates the differential equations using the functions available in the deSolve package.\nIn this chapter we will implement several examples of systems of differential equations and use the deSolve package in R to solve them. (See deSolve manual.)\n\n\nSimple example: population growth\nTo guide you through the model specification and application steps described above, we will start with an easy example: modelling population growth. One of the simplest models of population growth is the Malthusian model which assumes that a population of size \\(N(t)\\) grows at a rate proportional to its current size. That is, the growth rate per unit time of the population size obeys the relation\n\\[\\frac{dN(t)}{dt} \\propto N(t)\\]\n(where the symbol \\(\\propto\\) means “is proportional to”). In this case, the larger the current population size \\(N(t)\\), the faster it grows.\nWe can convert the proportionality relation given above into a standard differential equation by introducing the population growth rate \\(r\\):\n\\[\\frac{dN(t)}{dt} = rN(t)\\]\nThis differential equation is one dimensional, ie it has only one state variable: \\(N(t)\\); and it has a single parameter: the growth rate \\(r\\). Note that in this example, and those that follow, we will always include the time dependence of state variables to help distinguish them from model parameters.\nIn order to fully specify the model mathematically we must provide an initial condition, ie the population size \\(N\\) at time \\(t=0\\), which we denote as \\(N(t=0)=N_0\\). Here we take\n\\[\\begin{align}\nr &= 2 \\\\\nN_0 &= 1\n\\end{align}\\]\nGiven values for the growth rate \\(r\\) and the initial population size \\(N_0\\) we can now integrate (ie solve) our differential equation to determine the population size \\(N(t)\\) at future times \\(t>0\\).\n\nLibrary loading\nBefore doing anything else, let’s install the deSolve package and then load it into our workspace. We’ll also need the tidyverse, which is a bunch of packages that make working with data a bit easier in R.\n\nlibrary(deSolve)\nlibrary(tidyverse)\n\nIf you get an error while trying to load the package, make sure to install it through RStudio.\n\n\nSetting up the differential equation\nThe first step in solving a differential equation in deSolve is to specify our model parameters and initialize our state variables\n\n# Define model parameters and store values in a labelled vector\nparameters <- c(r = 2) # Growth rate\n\n# Specify the initial conditions, define state variables and assign initial values\ninitN <- 1 # Start with an initial population size N(0) = 1\nstate <- c(N = initN) # Specify the state variables and initialize them to their initial values\n\nThe model parameters, which in this case is just the growth rate \\(r\\), have been stored in the labelled vector parameters; and the state variables and their initial conditions have been defined in the vector state. Here we have been careful to ensure that the parameter and state variables are stored as vectors with assigned names and values.\nNext, we specify the model differential equation (given above) as a user-defined R function:\n\n# We specify the system of differential equations as a function in R\n# Here we specify a function with three arguments:\n# 1. t : time, which is the dependent variable in our case\n# 2. state : a vector of state variables\n# 3. parameters : a vector of parameters (ie fixed variables)\npopmodel_exponentialgrowth <- function(t, state, parameters) {\n    # Initialize an environment with the elements of state and parameters as local variables\n    with(as.list(c(state, parameters)), {\n        dNdt <- r * N # The model equation\n        list(c(dNdt)) # Return the population growth rate dNdt\n    })\n}\n\nIn the function definition given above we have used the with(as.list(c(state, parameters),{...}) statement to create an environment that allows us to access the state and parameter variables directly by name within our function popmodel_exponentialgrowth. If we didn’t use with, then we would have to refer to all of our parameters and states using the name notation, such as parameters['r'].\nThe user-defined function popmodel_exponentialgrowth, which calculates and returns the rate of change of each of our state variables, is the function that we will pass to ode from deSolve in order to solve the differential equation. However, before we can do this, we first need to specify a time lattice over which we wish our solution to our differential equation to be returned:\n\n# Start with an initial time of t=0 and solve up to t=5 with time increments of 0.01\ntimes <- seq(from = 0, to = 5, by = 0.01)\n\nNote that the sequence of times defined here by the user only specifies the lattice points at which we require an estimate of the solution, in this case the population size. In general, if the times sequence consists of time points t1, t2, t3, … the ode solver will return an estimate of the solution N(t1), N(t2), N(t3), .... Importantly, the vector times is not related to the time step used by the numerical integration routine adopted by the ode solver in ode.\nWe now have all of the ingredients we require to solve our simple population growth model and are ready to call the ode integration function:\n\n# Here we specify four arguments of the ode function:\n# 1. y : the state variables\n# 2. times : the time lattice over which we solve the differential equation\n# 3. func : our differential equation given in terms of our state variables and model parameters\n# 4. parms : our model parameters\nout <- ode(y = state, times = times, func = popmodel_exponentialgrowth, parms = parameters)\n\nIn the code above we call the ode function to numerically integrate our differential equation popmodel_exponentialgrowth and store the solution in the deSolve object out. To view the first few lines of output we can type\n\nhead(out)\n\n     time        N\n[1,] 0.00 1.000000\n[2,] 0.01 1.020202\n[3,] 0.02 1.040812\n[4,] 0.03 1.061839\n[5,] 0.04 1.083289\n[6,] 0.05 1.105173\n\n\nHere we see that the solution \\(N(t)\\) is given at each time point specified in the time lattice times, ie at intervals of \\(\\Delta t=0.01\\) from \\(t=0\\) up to \\(t=10\\). Notice that the first value of the solution \\(N\\) at time \\(t=0\\) is the initial value we specified above, initN = 1.\n\n\nPlotting the solution\nggplot doesn’t know how to deal with deSolve outputs directly, so we have to turn it into a data.frame using as.data.frame. Then, having done that, we can map our x and y axes and plot the solution:\n\nggplot(data = as.data.frame(out), aes(x=time, y=N)) +\n    geom_line() +\n    labs(x = \"Time, t\", y=\"Population size, N(t)\")\n\n\n\n\n\n\n\n\nThe plotted solution shows a population that grows exponentially with time rapidly increasing in size to >20,000 individuals.\nUsing the solution provided by the ode() function call and returned in the object out, determine the time interval during which the population size \\(N\\) exceeded 1000.\n\nIt is important to realize that rounding errors are inevitable during numerical integration and there is no guarantee that the solution generated by the ode function is accurate. Therefore, whenever possible, you should always validate your solution with known analytical results or approximations. Fortunately for our case, an exact analytical solution to the differential equation given above exists:\n\\[\\frac{dN(T)}{dt} = rN(t) \\quad \\Rightarrow \\quad N(t) = N_0 e^{rt}\\]\nwhere \\(e\\) is Euler’s number (=2.718282…). Given this analytical solution we can check the accuracy of our numerical solution by plotting the two solutions on the same graph:\n\n# Create a coarse time lattice for display purposes\ntimes_coarse <- seq(from = 0, to = 5, by = 1)\n# Calculate the exact solution given the model parameters and initial conditions\nNexact <- initN * exp(parameters[\"r\"] * times_coarse)\n\nexact_solution <- data.frame(time = times_coarse, Nexact)\n\nggplot() +\n    geom_line(data = as.data.frame(out), aes(x=time, y=N, colour=\"Numeric\")) +\n    geom_point(data = exact_solution, aes(x=time, y=Nexact, colour=\"Exact\")) +\n    labs(x = \"Time, t\", y=\"Population size, N(t)\", colour=\"\") +\n    scale_color_manual(values=c(\"red\",\"black\"))\n\n\n\n\n\n\n\n\nFrom the figure above we can see that the numerical solution obtained using the ode function (and its default parameter settings) provides a very accurate approximation of the exact model solution.\nRepeat your earlier calculation for the time taken for \\(N(t)>1000\\), this time using the exact analytical solution for the population size \\(N(t)\\). Compare your answer with the numerical result.\n\nWhen exact, or even approximate analytical solutions are not available, another way to validate your numerical solution is by decreasing the time step to see if the solution varies substantially. If the solution is stable, eventually you should notice very little difference in the numerical solution as you continually decrease the time step, ie it should converge. This can be adjusted in the ode function using the rtol and atol parameters which set the relative and absolute error tolerances accepted during the integration routine (see deSolve manual.)\n\n\n\n\n\nExercise: The SIR epidemic model\nTo model the spread of infectious diseases it is common to split the population up into three disease states: \\(S\\), susceptible to infection; \\(I\\), infected and infectious; \\(R\\), recovered. During an outbreak the rates of change of each of these three populations can be described using the following system of (coupled) differential equations:\n\\[\\begin{align}\n    \\frac{dS(t)}{dt}&=-\\beta S(t)I(t)\\\\\n    \\frac{dI(t)}{dt}&=\\beta S(t)I(t)-\\gamma I(t)\\\\\n    \\frac{dR(t)}{dt}&=\\gamma I(t).\n\\end{align}\\]\nThis system is known as the SIR model of disease transmission and contains two parameters: the infection transmission rate, \\(\\beta\\); and the recovery rate, \\(\\gamma\\).\nTaking parameter values\n\\[\\begin{align}\n    \\beta&=0.025\\\\\n    \\gamma&=1\n\\end{align}\\]\nand initial conditions\n\\[\\begin{align}\n    S_0 &= 199\\\\\n    I_0 &= 1\\\\\n    R_0 &= 0\n\\end{align}\\]\nsolve the SIR model following the same steps described above for the predator-prey model. Plot your solution to generate the following figure:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercises\n\nDescribe the epidemic trajectory for the parameter values provided: When did the epidemic peak occur? What was the final size (total number of people infected) of the epidemic outbreak?\n\nThe basic reproduction number \\(R_0\\) is defined as the average number of new cases generated by a typical infectious individual when introduced into a totally susceptible population. For the SIR model described above, the basic reproduction number is \\(R_0 = \\beta S_0 / \\gamma\\). Calculate the \\(R_0\\) for the parameter values given above.\n\nBy considering a range of values for the transmission rate \\(\\beta\\), describe how the epidemic trajectory varies as a function of \\(R_0\\). In particular, what happens when \\(R_0<1\\)?\n\nThe quantity \\(R_e(t) = \\beta S(t)/\\gamma\\) is called the effective reproduction number and it accounts for the depletion of susceptibles as the infection sweeps through the population. Review your previous results and record the value of \\(S(t_{peak})\\) where \\(t_{peak}\\) is the time at which the infectious population reaches its maximum, ie the epidemic peak. Using these values of \\(S(t_{peak})\\) calculate \\(R_e(t_{peak})\\) and report any patterns that you observe.\n\nIf the reproduction number gives the multiplicative growth rate in the number of infectious individuals can you explain your observations from the previous two questions.\n\n\n\n\n\n\n\n\nExtension exercises\n\nLogistic population growthLotka-Volttera Model\n\n\nFrom the figures we have generated so far you might have noticed that the Malthusian growth model is probably not appropriate in most settings (Why? Try solving the model over a longer time horizon to find out). A more realistic model of population growth is given by the logistic growth model where the growth rate \\(r\\) now varies as a function of the population size:\n\\[ r \\rightarrow r\\left(1 - \\frac{N(t)}{k}\\right)\\]\nsuch that the rate of change in population size \\(dN(t)/dt\\) becomes\n\\[\\frac{dN(t)}{dt} = rN(t) \\left(1-\\frac{N(t)}{K}\\right).\\]\nNotice we have now introduced a new parameter in our model: the carrying capacity, \\(K\\).\nYour task is to adapt the code sequence above which we used to solve the Malthusian (exponential) growth model to solve the logistic growth model. You may take the following values for the model parameters and state variables:\n\\[\\begin{align}\nr &= 0.15 \\\\\nK &= 1000 \\\\\nN_0 &= 1\n\\end{align}\\]\nYou will have to first determine what the model state variables and parameters are and then write your own function to evaluate the logistic function according to the above equations.\n\nExercises\n\nHow does the logistic growth model vary from the exponential model?\n\nHow does varying the parameter \\(K\\) vary the solution?\n\nWhat happens if you change the initial conditions?\n\n\nOnce again, an exact solution to our differential equation is available - it is given by\n\\[N(t) = \\frac{K}{1+\\left(\\frac{K}{N_0}-1\\right)e^{-rt}}\\]\nUsing this exact solution, check the accuracy of your numerical solution. Your answer should look something like the figure below:\n\n\n\n\n\n\n\n\n\n\n\n\nOften we are interested in dynamical systems that are described in terms of several state variables \\((x1(t),x2(t),…,xn(t))\\). For example, in chemical reactions we may want to track the concentrations of several reactants and products through time, or in ecological studies the population sizes of various species. In these cases we expect a system of differential equations, often one for each state variable:\n\\[\\begin{align}\n    \\frac{dx_1 (t)}{dt}&=f_1 (x_1,x_2,,…,x_n,t)\\\\\n    \\frac{dx_2 (t)}{dt}&=f_2 (x_1,x_2,…,x_n,t)\\\\\n    \\vdots \\\\\n    \\frac{dx_n (t)}{dt}&=f_n (x_1,x_2,…,x_n,t).\n\\end{align}\\]\nOn the left we have the rate of change of each state variable \\(x_i(t)\\) and on the right we have a function \\(f_i\\) describing that state’s rate of change. Notice that in the general case, each of the rate of change functions \\(f_i≡fi(x_1,x_2,...,x_n,t)\\) is a function of the other state variables in the system, ie the derivative of \\(x_i\\) may (most likely) depend on the current values of the remaining state variables, \\(x_j\\). If this is the case we say that our system of differential equations is coupled.\nLet us look at a specific example of a coupled set of differential equations. Consider a simple model of two interacting animal populations first described by Lotka (and later by Volterra). One species is the prey whilst the other is the predator. We shall denote their population sizes at time as \\(x(t)\\) and \\(y(t)\\) respectively.\n\n\n\nIn the Lotka-Volterra model the growth rates of the two populations are given by the following system of differential equations:\n\\[\\begin{align}\n    \\frac{dx(t)}{dt}&=\\alpha x(t)-\\beta x(t)y(t),\\\\        \n    \\frac{dy(t)}{dt}&=\\delta x(t)y(t)- \\gamma y(t).\n\\end{align}\\]\nIn the system above, \\(\\alpha\\) is the growth rate of the prey population; \\(\\beta\\) is the predation rate; δ is the growth rate of the predator population \\(\\delta\\) and; \\(\\gamma\\) is the death rate of the predator population. Note that the two animal populations interact through the predation term \\(\\beta x(t)y(t)\\).\nTo complete the description of our model we supply initial conditions for the predator and prey populations which we denote \\(x_0\\) and \\(y_0\\) respectively. In particular we take for parameter values and initial conditions: \\(\\alpha=1\\), \\(\\beta=2\\), \\(\\delta=1\\) and \\(\\gamma=1\\); \\(x_0=2\\) and \\(y_0=0.5\\).\nThe below code blocks provide parameters and initial conditions for the system:\n\n# Define model parameters and store values in a labelled vector\nparameters <- c(\n    alpha = 1, # prey growth rate\n    beta = 2, # predation rate\n    delta = 1, # predator growth rate\n    gamma = 1 # predator death/removal rate\n)\n\n\n# Specify the initial conditions\ninitx <- 2 # Initial prey population size\ninity <- 0.5 # Initial predator population size\n\n# Define the state variables and assign initial values\nstate <- c(x = initx, y = inity)\n\nYour task is to solve the differential equation over the following time lattice:\n\n# Specify the initial and final times of the solution vector\ntinit <- 0 # Initial time\ntfinal <- 20 # Final time\nstep_size <- 0.1 # Time increment\ntimes = seq(from = tinit, to = tfinal, by = 0.1) # Time vector\n\nYou need to create the function that evaluates the differential equation and create the following plot:"
  },
  {
    "objectID": "session3_writing_a_model_to_suit_the_infectious_agent/session3_writing_a_model_to_suit_the_infectious_agent.html#more-practice",
    "href": "session3_writing_a_model_to_suit_the_infectious_agent/session3_writing_a_model_to_suit_the_infectious_agent.html#more-practice",
    "title": "Designing a model to suit the pathogen",
    "section": "More practice",
    "text": "More practice\n\nRepeat this process for measles, a short-lived disease with lifelong immunity.\n\nYou might find the following diagram helpful: \nUpload your model diagram:"
  },
  {
    "objectID": "session3_writing_a_model_to_suit_the_infectious_agent/session3_writing_a_model_to_suit_the_infectious_agent.html#examine-the-graphs-that-plot-s-e-i-and-r-over-time-for-the-default-parameters.",
    "href": "session3_writing_a_model_to_suit_the_infectious_agent/session3_writing_a_model_to_suit_the_infectious_agent.html#examine-the-graphs-that-plot-s-e-i-and-r-over-time-for-the-default-parameters.",
    "title": "Designing a model to suit the pathogen",
    "section": "Examine the graphs that plot S, E, I and R over time for the default parameters.",
    "text": "Examine the graphs that plot S, E, I and R over time for the default parameters.\n\nWhat kind of model is it?\n\n\nChange the parameter for the basic reproduction number. What impact does this have on:\n\nThe duration of the epidemic?\n\nThe peak of infectious cases?\n\nThe final proportion of susceptibles?\n\n\nChange the parameter for latency duration. What impact does this have on:\n\nThe duration of the epidemic?\n\nThe peak of infectious cases?\n\nThe final proportion of susceptibles?\n\n\nReduce the duration of immunity.\n\nWhat type of model have we now created?\n\nHow does this impact on the number of susceptibles after a long time?\n\nHow does this impact on the number of infectious after a long time?\n\nWhy does the model have waves?\n\n\nExamine the phase plane.\n\nWhat is it showing?\n\nWhere is time on the phase plane?\n\nWhat corresponds to the waves in the phase plane?\n\n\nContinue to change the parameters to try and simulate the different model types such as those pictured below."
  }
]