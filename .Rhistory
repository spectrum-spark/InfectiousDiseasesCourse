##Model
#######
vector.sir.model <- function (t, x, params) {
## extract the state variables
Sh  <- x[1]
Ih  <- x[2]
Rh  <- x[3]
Sv  <- x[4]
Iv  <- x[5]
## extract the parameters
biting  <- params["biting"] # number of bites per mosquito per unit time
nu_h    <- params["nu_h"]   # birth rate of humans
T_hv    <- params["T_HV"]   # probability bite leads to transmission V to H
T_vh    <- params["T_VH"]   # probability bite leads to transmission H to V
mu_h    <- params["mu_h"]   # death rate of humans
nu_v    <- params["nu_v"]   # birth rate of mosquitoes
mu_v    <- params["mu_v"]   # death rate of mosquitoes
gamma   <- params["gamma"]  # recovery rate of humans
Nh      <- Sh + Ih + Rh
Nv      <- Sv + Iv
## the model equations
dShdt <- nu_h * Nh - (biting * T_hv * Iv * Sh) / Nh - mu_h * Sh
dIhdt <- (biting * T_hv * Iv * Sh) / Nh - mu_h * Ih - gamma * Ih
dRhdt <- gamma * Ih
dSvdt <- nu_v * Nv - (biting * T_vh * Ih * Sv) / Nh - mu_v * Sv
dIvdt <- (biting * T_vh * Ih * Sv) / Nh - mu_v * Iv
## combine results into a single vector
dxdt <- c(dShdt, dIhdt, dRhdt, dSvdt, dIvdt)
## return result as a list
list(dxdt)
}
parameters <- c(biting = 0.5,
nu_h = 1 / (70 * 365),
T_HV = 0.5,
T_VH = 0.8,
mu_h = 1 / (70 * 365),
nu_v = 1 / 14,
mu_v = 1 / 14,
gamma = 0.5)
times  <- seq(from = 0, to = 150,by = 0.1)
xstart <- c(Sh = 1000, Ih = 1, Rh = 0, Sv = 3700, Iv = 1)
ode(
func = vector.sir.model,
y = xstart,
times = times,
parms = parameters
) %>%
as.data.frame() -> out
out %>%
gather(variable,value,-time) %>%
ggplot(aes(x = time,y = value,color = variable)) +
geom_line(size = 2) +
theme_classic() +
labs(x = 'time (days)',y='number of individuals')
# Model files for vector-borne disease
# Trish Campbell March 2022
##############
##Housekeeping
##############
library(deSolve)
library(tidyverse)
#######
##Model
#######
vector.sir.model <- function (t, x, params) {
## extract the state variables
Sh  <- x[1]
Ih  <- x[2]
Rh  <- x[3]
Sv  <- x[4]
Iv  <- x[5]
## extract the parameters
biting  <- params["biting"] # number of bites per mosquito per unit time
T_hv    <- params["T_HV"]   # probability bite leads to transmission V to H
T_vh    <- params["T_VH"]   # probability bite leads to transmission H to V
nu_v    <- params["nu_v"]   # birth rate of mosquitoes
mu_v    <- params["mu_v"]   # death rate of mosquitoes
gamma   <- params["gamma"]  # recovery rate of humans
Nh      <- Sh + Ih + Rh
Nv      <- Sv + Iv
## the model equations
dShdt <- - (biting * T_hv * Iv * Sh) / Nh
dIhdt <- (biting * T_hv * Iv * Sh) / Nh - gamma * Ih
dRhdt <- gamma * Ih
dSvdt <- nu_v * Nv - (biting * T_vh * Ih * Sv) / Nh - mu_v * Sv
dIvdt <- (biting * T_vh * Ih * Sv) / Nh - mu_v * Iv
## combine results into a single vector
dxdt <- c(dShdt, dIhdt, dRhdt, dSvdt, dIvdt)
## return result as a list
list(dxdt)
}
parameters <- c(biting = 0.5,
nu_h = 1 / (70 * 365),
T_HV = 0.5,
T_VH = 0.8,
mu_h = 1 / (70 * 365),
nu_v = 1 / 14,
mu_v = 1 / 14,
gamma = 0.5)
times  <- seq(from = 0, to = 150,by = 0.1)
xstart <- c(Sh = 1000, Ih = 1, Rh = 0, Sv = 3700, Iv = 1)
ode(
func = vector.sir.model,
y = xstart,
times = times,
parms = parameters
) %>%
as.data.frame() -> out
out %>%
gather(variable,value,-time) %>%
ggplot(aes(x = time,y = value,color = variable)) +
geom_line(size = 2) +
theme_classic() +
labs(x = 'time (days)',y='number of individuals')
# Model files for vector-borne disease
# Trish Campbell March 2022
##############
##Housekeeping
##############
library(deSolve)
library(tidyverse)
#######
##Model
#######
vector.sir.model <- function (t, x, params) {
## extract the state variables
Sh  <- x[1]
Ih  <- x[2]
Rh  <- x[3]
Sv  <- x[4]
Iv  <- x[5]
## extract the parameters
biting  <- params["biting"] # number of bites per mosquito per unit time
T_hv    <- params["T_HV"]   # probability bite leads to transmission V to H
T_vh    <- params["T_VH"]   # probability bite leads to transmission H to V
nu_v    <- params["nu_v"]   # birth rate of mosquitoes
mu_v    <- params["mu_v"]   # death rate of mosquitoes
gamma   <- params["gamma"]  # recovery rate of humans
Nh      <- Sh + Ih + Rh
Nv      <- Sv + Iv
## the model equations
dShdt <- - (biting * T_hv * Iv * Sh) / Nh
dIhdt <- (biting * T_hv * Iv * Sh) / Nh - gamma * Ih
dRhdt <- gamma * Ih
dSvdt <- nu_v * Nv - (biting * T_vh * Ih * Sv) / Nh - mu_v * Sv
dIvdt <- (biting * T_vh * Ih * Sv) / Nh - mu_v * Iv
## combine results into a single vector
dxdt <- c(dShdt, dIhdt, dRhdt, dSvdt, dIvdt)
## return result as a list
list(dxdt)
}
parameters <- c(biting = 0.5,
T_HV = 0.5,
T_VH = 0.8,
nu_v = 1 / 14,
mu_v = 1 / 14,
gamma = 0.5)
times  <- seq(from = 0, to = 150,by = 0.1)
xstart <- c(Sh = 1000, Ih = 1, Rh = 0, Sv = 3700, Iv = 1)
ode(
func = vector.sir.model,
y = xstart,
times = times,
parms = parameters
) %>%
as.data.frame() -> out
out %>%
gather(variable,value,-time) %>%
ggplot(aes(x = time,y = value,color = variable)) +
geom_line(size = 2) +
theme_classic() +
labs(x = 'time (days)',y='number of individuals')
install.packages("flair", lib="C:/Program Files/R/R-4.0.5/library")
library(flair)
install.packages(c("reactable", "kableExtra", "flextable"), lib="C:/Program Files/R/R-4.0.5/library")
Sys.which("make")
# Library imports
required_packages <- (c("dplyr",
"deSolve",
"ggplot2"))
for (pkg in required_packages) {
if (!require(pkg)) {
install.packages(pkg)
library(pkg, character.only = TRUE)
}
}
!require(dplyr)
!require(dplyr)
detach("package:dplyr", unload = TRUE)
!require(dplyr)
detach("package:dplyr", unload = TRUE)
# Library imports
required_packages <- (c("dplyr",
"deSolve",
"ggplot2"))
for (pkg in required_packages) {
if (!require(pkg)) {
install.packages(pkg)
library(pkg, character.only = TRUE)
}
}
!require("dplyr")
library(dplyr)
library(deSolve)
install.packages("xaringanExtra", lib="C:/Program Files/R/R-4.0.5/library")
# Model parameters
parameters <- c(
bites = 0.63, # number of bites per mosquito per day
T_HM = 0.26, # probability of transmission - mosquito to human
T_MH = 0.26, # probability of transmission - human to mosquito
infectious_period = 5, # days. Duration in infectious compartment
mu_M = 1/14, # per day. Mosquito birth and death rate.
exposed_period_H = 5.5, # days. Duration in exposed compartment - human
exposed_period_M = 10 # days. Duration in exposed compartment - mosquito
)
# Initial conditions
human_population <- 150000 # population of Cairns in 2008
initial_human_susceptible <- 149998
initial_human_exposed <- 0
initial_human_infectious <- 2
initial_human_recovered <- human_population - initial_human_susceptible - initial_human_infectious - initial_human_exposed
mosquito_population <- 225000 # 3 times human population, divided by 2
initial_mosquito_susceptible <- 224990
initial_mosquito_exposed <- 0
initial_mosquito_infectious <- mosquito_population - initial_mosquito_susceptible - initial_mosquito_exposed
# Define model compartments, gather into a single variable to capture the state of the system and set to initial values
state <- c(Susceptible_human = initial_human_susceptible,
Exposed_human = initial_human_exposed,
Infectious_human = initial_human_infectious,
Recovered_human = initial_human_recovered,
Susceptible_mosquito = initial_mosquito_susceptible,
Exposed_mosquito = initial_mosquito_exposed,
Infectious_mosquito = initial_mosquito_infectious)
# Time window
start_date = as.Date("2008-11-02")
end_date = as.Date("2011-05-31")
times = seq(start_date, end_date, by = 1)
# Model function
dengue_with_E <- function(t, state, parameters){
with(as.list(c(state, parameters)), {
# Calculate the total population sizes
Total_human_population <- Susceptible_human + Infectious_human + Recovered_human + Exposed_human
Total_mosquito_population <- Susceptible_mosquito + Infectious_mosquito + Exposed_mosquito
# Calculate the average force of infection imposed on each susceptible human
force_of_infection_on_human <- bites * T_HM * Infectious_mosquito / Total_human_population
# Calculate the average force of infection imposed on each susceptible mosquito
force_of_infection_on_mosquito <- bites * T_MH * Infectious_human / Total_human_population
# Calculate the (net) instantaneous change in each compartment
Susceptible_human_change <- -force_of_infection_on_human * Susceptible_human
Exposed_human_change <- force_of_infection_on_human * Susceptible_human - Exposed_human / exposed_period_H
Infectious_human_change <- Exposed_human / exposed_period_H - Infectious_human / infectious_period
Recovered_human_change <- Infectious_human / infectious_period
Susceptible_mosquito_change <- mu_M * Total_mosquito_population - (force_of_infection_on_mosquito + mu_M) * Susceptible_mosquito
Exposed_mosquito_change <- force_of_infection_on_mosquito * Susceptible_mosquito - Exposed_mosquito * (1 / exposed_period_M + mu_M)
Infectious_mosquito_change <- Exposed_mosquito / exposed_period_M - mu_M * Infectious_mosquito
# Return net changes as list
return(list(
c(
Susceptible_human_change,
Exposed_human_change,
Infectious_human_change,
Recovered_human_change,
Susceptible_mosquito_change,
Exposed_mosquito_change,
Infectious_mosquito_change
)
))
})
}
# Solve model
out_dengue_with_E <- ode(y = state, times = as.numeric(times - times[1]), func = dengue_with_E, parms = parameters)
# Library imports
required_packages <- (c("dplyr",
"deSolve",
"ggplot2"))
for (pkg in required_packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg)
library(pkg, character.only = TRUE)
}
}
# Model parameters
parameters <- c(
bites = 0.63, # number of bites per mosquito per day
T_HM = 0.26, # probability of transmission - mosquito to human
T_MH = 0.26, # probability of transmission - human to mosquito
infectious_period = 5, # days. Duration in infectious compartment
mu_M = 1/14, # per day. Mosquito birth and death rate.
exposed_period_H = 5.5, # days. Duration in exposed compartment - human
exposed_period_M = 10 # days. Duration in exposed compartment - mosquito
)
# Initial conditions
human_population <- 150000 # population of Cairns in 2008
initial_human_susceptible <- 149998
initial_human_exposed <- 0
initial_human_infectious <- 2
initial_human_recovered <- human_population - initial_human_susceptible - initial_human_infectious - initial_human_exposed
mosquito_population <- 225000 # 3 times human population, divided by 2
initial_mosquito_susceptible <- 224990
initial_mosquito_exposed <- 0
initial_mosquito_infectious <- mosquito_population - initial_mosquito_susceptible - initial_mosquito_exposed
# Define model compartments, gather into a single variable to capture the state of the system and set to initial values
state <- c(Susceptible_human = initial_human_susceptible,
Exposed_human = initial_human_exposed,
Infectious_human = initial_human_infectious,
Recovered_human = initial_human_recovered,
Susceptible_mosquito = initial_mosquito_susceptible,
Exposed_mosquito = initial_mosquito_exposed,
Infectious_mosquito = initial_mosquito_infectious)
# Time window
start_date = as.Date("2008-11-02")
end_date = as.Date("2011-05-31")
times = seq(start_date, end_date, by = 1)
# Model function
dengue_with_E <- function(t, state, parameters){
with(as.list(c(state, parameters)), {
# Calculate the total population sizes
Total_human_population <- Susceptible_human + Infectious_human + Recovered_human + Exposed_human
Total_mosquito_population <- Susceptible_mosquito + Infectious_mosquito + Exposed_mosquito
# Calculate the average force of infection imposed on each susceptible human
force_of_infection_on_human <- bites * T_HM * Infectious_mosquito / Total_human_population
# Calculate the average force of infection imposed on each susceptible mosquito
force_of_infection_on_mosquito <- bites * T_MH * Infectious_human / Total_human_population
# Calculate the (net) instantaneous change in each compartment
Susceptible_human_change <- -force_of_infection_on_human * Susceptible_human
Exposed_human_change <- force_of_infection_on_human * Susceptible_human - Exposed_human / exposed_period_H
Infectious_human_change <- Exposed_human / exposed_period_H - Infectious_human / infectious_period
Recovered_human_change <- Infectious_human / infectious_period
Susceptible_mosquito_change <- mu_M * Total_mosquito_population - (force_of_infection_on_mosquito + mu_M) * Susceptible_mosquito
Exposed_mosquito_change <- force_of_infection_on_mosquito * Susceptible_mosquito - Exposed_mosquito * (1 / exposed_period_M + mu_M)
Infectious_mosquito_change <- Exposed_mosquito / exposed_period_M - mu_M * Infectious_mosquito
# Return net changes as list
return(list(
c(
Susceptible_human_change,
Exposed_human_change,
Infectious_human_change,
Recovered_human_change,
Susceptible_mosquito_change,
Exposed_mosquito_change,
Infectious_mosquito_change
)
))
})
}
# Solve model
out_dengue_with_E <- ode(y = state, times = as.numeric(times - times[1]), func = dengue_with_E, parms = parameters)
# Plot solution
plot(out_dengue_with_E,
main = c("Susceptible humans", "Exposed humans", "Infectious humans", "Recovered humans",
"Susceptible mosquitoes", "Exposed mosquitoes", "Infectious mosquitoes"),
xlab = "Time", ylab = c("population size"))
# Convert ode output to data frame
dengue_with_E_infections <- as.data.frame(out_dengue_with_E[, c("time", "Infectious_human", "Recovered_human")])
# Create columns for new infections and cumulative new infections,
# Select every 7th row and calculate the difference
dengue_with_E_infections <- dengue_with_E_infections  %>%
mutate(Infectious_human_change = c(0, diff(Infectious_human)),
Recovered_human_change = c(0, diff(Recovered_human)),
New_human_infections = Infectious_human_change + Recovered_human_change,
Cumulative_human_infections = cumsum(New_human_infections)) %>%
filter(time %% 7 == 0) %>%
select(c("time", "Cumulative_human_infections")) %>%
mutate(Weekly_human_infections = c(0, diff(Cumulative_human_infections)))
# Plot solution
plot(dengue_with_E_infections$time, dengue_with_E_infections$Weekly_human_infections,
xlab = "Time", ylab = c("number of infections"),
main = "Weekly human new infections, model with E")
q <- seq(0,1,0.001)
n <- seq(0,10,1)
lambda1 <- 1-(1-q)^n
lambda2 <- n*q
lambda3 <- 1-exp(-n*q)
q <- seq(0,1,0.001)
n <- seq(0,10,1)
for (i %in% n){
lambda1[i,] <- 1-(1-q)^i
lambda2[i,] <- i*q
lambda3[i,] <- 1-exp(-i*q)
}
for (i in n){
lambda1[i,] <- 1-(1-q)^i
lambda2[i,] <- i*q
lambda3[i,] <- 1-exp(-i*q)
}
q <- seq(0,1,0.001)
n <- 2
lambda1 <- 1-(1-q)^n
lambda2 <- n*q
lambda3 <- 1-exp(-n*q)
library(ggplot2)
library(EpiNow2)
library(epitools)
install.packages("epitools", lib="C:/Program Files/R/R-4.0.5/library")
library(epitools)
knitr::opts_chunk$set(echo = FALSE)
setwd("C:/Users/patriciac/OneDrive - The University of Melbourne/Teaching/POPH90271_Infectious_Diseases_Modelling/2022/Assessments/2_Major_assignment")
library(ggplot2)
library(dplyr)
library(knitr)
## Load Data
POPH90271_ASS2_marks <- read.csv("C:/Users/patriciac/OneDrive - The University of Melbourne/Teaching/POPH90271_Infectious_Diseases_Modelling/2022/Assessments/2_Major_assignment/Major_Assignment_Grade_Comparison_POPH90271_2022_SM2.csv", header=TRUE)
POPH90271_ASS2_marks$Marker <- factor(POPH90271_ASS2_marks$Marker,
levels = c("1", "2", "3", "4"),
labels = c("Rob", "Eamon", "Trish", "Freya"))
POPH90271_ASS2_marks <- rename(POPH90271_ASS2_marks, raw_mark = Raw.mark....,
late_penalty = Late.Penalty....from.100.,
adjusted_mark = Adjusted.mark....)
ggplot(data = POPH90271_ASS2_marks) +
geom_histogram(mapping = aes(x = raw_mark), binwidth = 10)
ggplot(data = POPH90271_ASS2_marks, mapping = aes(x = Marker, y = raw_mark)) +
geom_boxplot() +
ylab("Mark") +
scale_y_continuous(limits = c(0,100), breaks = seq(0, 100, 10))
R0 <- seq(1,10, 1)
R_inf <- seq(0, 1, 0.1)
y <- 1 - exp(-R0*R_inf)
x <- 3:40
x>10 & x<20
x[x>10 & x<20]
cal <- function(x){x^2+x},
cal <- function(x){x^2+x}
cal(x=c(4,5))
y <-cal(x=c(4,5))
str(y)
??rnorm
24*60/20
2^72
??trace
??trace
?trace
pnorm(145, 100, 15, lower.tail=FALSE)
qnorm(145, 100, 15, lower.tail=FALSE)
dnorm(145, 100, 15, lower.tail=FALSE)
pnorm(100, 100, 15, lower.tail=FALSE)
pnorm(130, 100, 15, lower.tail=FALSE)
pnorm(145, 100, 15, lower.tail=FALSE)
x <- c(1      6      4      12      7      2      3)
x <- c(1,6,4,12,7,2,3)
IQR(x)
quantile(x,1/4)
quantile(x,3/4)
IQR(x,3/4,1)
IQR(x,3/4,2)
IQR(x,3/4,3)
IQR(x,3/4,4)
library(quarto)
sessionInfo()
library(quarto)
install.packages(c("tidyverse", "quarto", "ggplot2"))
library(quarto)
install.packages("epinow2")
install.packages("epinow")
install.packages("EpiNow2")
library(EpiNow2)
reporting_delay <- estimate_delay(
rlnorm(1000, log(2), 1),
max_value = 15, bootstraps = 1
)
generation_time <- get_generation_time(
disease = "SARS-CoV-2", source = "ganyani", max = 10, fixed = TRUE
)
incubation_period <- get_incubation_period(
disease = "SARS-CoV-2", source = "lauer", max = 10, fixed = TRUE
)
reported_cases <- example_confirmed[1:60]
head(reported_cases)
estimates <- epinow(
reported_cases = reported_cases,
generation_time = generation_time_opts(generation_time),
delays = delay_opts(incubation_period, reporting_delay),
rt = rt_opts(prior = list(mean = 2, sd = 0.2)),
stan = stan_opts(cores = 4, control = list(adapt_delta = 0.99)),
verbose = interactive()
)
names(estimates)
generation_time <- get_generation_time(
+     disease = "SARS-CoV-2", source = "ganyani", max = 10)
generation_time <- get_generation_time(
+     disease = "SARS-CoV-2", source = "ganyani", max = 10)
generation_time <- get_generation_time(disease="SARS-CoV-2", source="ganyani", max =10)
incubation_period <- get_incubation_period(
disease="SARS-CoV-2", source="lauer", max=10)
estimates <- epinow(
reported_cases = reported_cases,
generation_time = generation_time_opts(generation_time),
delays = delay_opts(incubation_period, reporting_delay),
rt = rt_opts(prior = list(mean = 2, sd = 0.2)),
stan = stan_opts(cores = 4, control = list(adapt_delta = 0.99)),
verbose = interactive()
)
names(estimates)
View(generation_time)
estimates <- epinow(
reported_cases = reported_cases,
generation_time = generation_time,
delays = delay_opts(incubation_period, reporting_delay),
rt = rt_opts(prior = list(mean = 2, sd = 0.2)),
stan = stan_opts(cores = 4, control = list(adapt_delta = 0.99)),
verbose = interactive()
)
names(estimates)
plot(estimates)
getwd()
setwd("C:\Users\patriciac\OneDrive - The University of Melbourne\repos\spectrum-spark\InfectiousDiseasesCourse\session7_vector_borne_modelling")
setwd("C:/Users/patriciac/OneDrive - The University of Melbourne/repos/spectrum-spark/InfectiousDiseasesCourse/session7_vector_borne_modelling")
source("renv/activate.R")
setwd("..")
source("renv/activate.R")
renv::restore()
renv::install("kableExtra")
renv::restore()
